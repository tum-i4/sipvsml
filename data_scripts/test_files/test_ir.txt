%3 = alloca i64*, align 8
%4 = alloca i64, align 8
%5 = alloca i64*, align 8
%6 = alloca i64, align 8
%7 = alloca i64*, align 8
%8 = alloca i64, align 8
%9 = alloca i64*, align 8
%10 = alloca i64, align 8
%11 = alloca i64*, align 8
%12 = alloca i64, align 8
%13 = alloca i64*, align 8
%14 = alloca i64, align 8
%15 = alloca i64*, align 8
%16 = alloca i64, align 8
%17 = alloca i64*, align 8
%18 = alloca i64, align 8
%19 = alloca i64*, align 8
%20 = alloca i64, align 8
%21 = alloca i64*, align 8
%22 = alloca i64, align 8
%23 = alloca i64*, align 8
%24 = alloca i64, align 8
%25 = alloca i64*, align 8
%26 = alloca i64, align 8
%27 = alloca i64*, align 8
%28 = alloca i64, align 8
%29 = alloca i64*, align 8
%30 = alloca i64, align 8
%31 = alloca i64*, align 8
%32 = alloca i64, align 8
call void @oh_path_functions()
%local_hash4 = alloca i64, align 8
store i64 0, i64* %local_hash4, align 8
%local_hash3 = alloca i64, align 8
store i64 0, i64* %local_hash3, align 8
%local_hash2 = alloca i64, align 8
store i64 0, i64* %local_hash2, align 8
%local_hash = alloca i64, align 8
store i64 0, i64* %local_hash, align 8
%33 = alloca i32, align 4, !input_indep_block !33, !input_dep_instr !34, !data_dep_instr !35
%34 = alloca i32, align 4, !input_dep_instr !34, !data_dep_instr !35
%35 = alloca i8**, align 8, !input_dep_instr !34, !data_dep_instr !35
%36 = alloca i8*, align 8, !input_dep_instr !34, !data_dep_instr !35
%37 = alloca i8*, align 8, !input_dep_instr !34, !data_dep_instr !35
%38 = alloca i32, align 4, !input_dep_instr !34, !data_dep_instr !35
%39 = alloca i64, align 8, !input_dep_instr !34, !data_dep_instr !35
store i64* @0, i64** %7, align 8
store i64 1000000000000, i64* %8, align 8
%40 = load i64*, i64** %7, align 8
%41 = load i64, i64* %40, align 8
%42 = load i64, i64* %8, align 8
%43 = icmp ne i64 %41, %42, !oh_verify !36
br i1 %43, label %44, label %assert.1.exit
call void @exit(i32 1) #5
br label %UnifiedUnreachableBlock
store i32 0, i32* %33, align 4, !input_indep_instr !37, !data_indep_instr !38
%45 = load i32, i32* %33
%46 = zext i32 %45 to i64
store i64* @0, i64** %3, align 8
store i64 %46, i64* %4, align 8
%47 = load i64*, i64** %3, align 8
%48 = load i64, i64* %47, align 8
%49 = load i64, i64* %4, align 8
%50 = xor i64 %48, %49
%51 = load i64*, i64** %3, align 8
store i64 %50, i64* %51, align 8
store i32 %0, i32* %34, align 4, !input_dep_instr !34, !data_dep_instr !35, !argument_dep_instr !39
store i8** %1, i8*** %35, align 8, !input_dep_instr !34, !data_dep_instr !35, !argument_dep_instr !39
%52 = load i32, i32* %34, align 4, !input_dep_instr !34, !data_dep_instr !35, !argument_dep_instr !39
%53 = icmp slt i32 %52, 3, !input_dep_instr !34, !data_dep_instr !35, !argument_dep_instr !39
%54 = zext i1 %53 to i64
store i64* %local_hash, i64** %5, align 8
store i64 %54, i64* %6, align 8
%55 = load i64*, i64** %5, align 8
%56 = load i64, i64* %55, align 8
%57 = load i64, i64* %6, align 8
%58 = add nsw i64 %56, %57
%59 = load i64*, i64** %5, align 8
store i64 %58, i64* %59, align 8
br i1 %53, label %60, label %74, !prof !40, !input_dep_instr !34, !data_dep_instr !35, !argument_dep_instr !39
store i32 1, i32* %33, align 4, !data_indep_instr !38, !argument_dep_instr !39, !input_dep_block !41, !control_dep_instr !42
%61 = load i32, i32* %33
%62 = zext i32 %61 to i64
store i64* %local_hash, i64** %19, align 8
store i64 %62, i64* %20, align 8
%63 = load i64*, i64** %19, align 8
%64 = load i64, i64* %63, align 8
%65 = load i64, i64* %20, align 8
%66 = add nsw i64 %64, %65
%67 = load i64*, i64** %19, align 8
store i64 %66, i64* %67, align 8
%68 = load i64, i64* %local_hash
store i64 %68, i64* @1
store i64* @1, i64** %31, align 8
store i64 2000000000000, i64* %32, align 8
%69 = load i64*, i64** %31, align 8
%70 = load i64, i64* %69, align 8
%71 = load i64, i64* %32, align 8
%72 = icmp ne i64 %70, %71, !oh_verify !36
br i1 %72, label %73, label %assert.exit
call void @exit(i32 1) #5
br label %UnifiedUnreachableBlock
br label %126, !data_indep_instr !38, !argument_dep_instr !39, !control_dep_instr !42
%75 = load i8**, i8*** %35, align 8, !data_dep_instr !35, !argument_dep_instr !39, !input_dep_block !41, !control_dep_instr !42
%76 = getelementptr inbounds i8*, i8** %75, i64 1, !data_dep_instr !35, !argument_dep_instr !39, !control_dep_instr !42
%77 = load i8*, i8** %76, align 8, !data_dep_instr !35, !argument_dep_instr !39, !control_dep_instr !42
store i8* %77, i8** %36, align 8, !data_dep_instr !35, !argument_dep_instr !39, !control_dep_instr !42
%78 = load i8**, i8*** %35, align 8, !data_dep_instr !35, !argument_dep_instr !39, !control_dep_instr !42
%79 = getelementptr inbounds i8*, i8** %78, i64 2, !data_dep_instr !35, !argument_dep_instr !39, !control_dep_instr !42
%80 = load i8*, i8** %79, align 8, !data_dep_instr !35, !argument_dep_instr !39, !control_dep_instr !42
store i8* %80, i8** %37, align 8, !data_dep_instr !35, !argument_dep_instr !39, !control_dep_instr !42
%81 = load i8*, i8** %36, align 8, !data_dep_instr !35, !argument_dep_instr !39, !control_dep_instr !42
%82 = load i8*, i8** %37, align 8, !data_dep_instr !35, !argument_dep_instr !39, !control_dep_instr !42
%83 = call i32 @check_anagram(i8* %81, i8* %82), !data_indep_instr !38, !argument_dep_instr !39, !control_dep_instr !42
store i32 %83, i32* %38, align 4, !data_indep_instr !38, !argument_dep_instr !39, !control_dep_instr !42
%84 = load i32, i32* %38, align 4, !data_indep_instr !38, !argument_dep_instr !39, !control_dep_instr !42
%85 = icmp eq i32 %84, 1, !data_indep_instr !38, !argument_dep_instr !39, !control_dep_instr !42
%86 = zext i1 %85 to i64
store i64* %local_hash2, i64** %17, align 8
store i64 %86, i64* %18, align 8
%87 = load i64*, i64** %17, align 8
%88 = load i64, i64* %87, align 8
%89 = load i64, i64* %18, align 8
%90 = add nsw i64 %88, %89
%91 = load i64*, i64** %17, align 8
store i64 %90, i64* %91, align 8
%92 = zext i1 %85 to i64
store i64* %local_hash4, i64** %15, align 8
store i64 %92, i64* %16, align 8
%93 = load i64*, i64** %15, align 8
%94 = load i64, i64* %93, align 8
%95 = load i64, i64* %16, align 8
%96 = add nsw i64 %94, %95
%97 = load i64*, i64** %15, align 8
store i64 %96, i64* %97, align 8
br i1 %85, label %98, label %105, !data_indep_instr !38, !argument_dep_instr !39, !control_dep_instr !42
call void @main0(i8** %37, i8** %36), !data_indep_instr !38, !argument_dep_instr !39, !input_dep_block !41, !control_dep_instr !42
%99 = load i64, i64* %local_hash2
store i64 %99, i64* @1
store i64* @1, i64** %29, align 8
store i64 5000000000000, i64* %30, align 8
%100 = load i64*, i64** %29, align 8
%101 = load i64, i64* %100, align 8
%102 = load i64, i64* %30, align 8
%103 = icmp ne i64 %101, %102, !oh_verify !36
br i1 %103, label %104, label %assert.exit1
call void @exit(i32 1) #5
br label %UnifiedUnreachableBlock
br label %112, !data_indep_instr !38, !argument_dep_instr !39, !control_dep_instr !42
call void @main1(i8** %37, i8** %36), !data_indep_instr !38, !argument_dep_instr !39, !input_dep_block !41, !control_dep_instr !42
%106 = load i64, i64* %local_hash4
store i64 %106, i64* @1
store i64* @1, i64** %27, align 8
store i64 7000000000000, i64* %28, align 8
%107 = load i64*, i64** %27, align 8
%108 = load i64, i64* %107, align 8
%109 = load i64, i64* %28, align 8
%110 = icmp ne i64 %108, %109, !oh_verify !36
br i1 %110, label %111, label %assert.exit2
call void @exit(i32 1) #5
br label %UnifiedUnreachableBlock
br label %112, !data_indep_instr !38, !argument_dep_instr !39, !control_dep_instr !42
store i32 0, i32* %33, align 4, !data_indep_instr !38, !argument_dep_instr !39, !input_dep_block !41, !control_dep_instr !42
%113 = load i32, i32* %33
%114 = zext i32 %113 to i64
store i64* %local_hash3, i64** %13, align 8
store i64 %114, i64* %14, align 8
%115 = load i64*, i64** %13, align 8
%116 = load i64, i64* %115, align 8
%117 = load i64, i64* %14, align 8
%118 = add nsw i64 %116, %117
%119 = load i64*, i64** %13, align 8
store i64 %118, i64* %119, align 8
%120 = load i64, i64* %local_hash3
store i64 %120, i64* @1
store i64* @1, i64** %25, align 8
store i64 6000000000000, i64* %26, align 8
%121 = load i64*, i64** %25, align 8
%122 = load i64, i64* %121, align 8
%123 = load i64, i64* %26, align 8
%124 = icmp ne i64 %122, %123, !oh_verify !36
br i1 %124, label %125, label %assert.exit3
call void @exit(i32 1) #5
br label %UnifiedUnreachableBlock
br label %126, !data_indep_instr !38, !argument_dep_instr !39, !control_dep_instr !42
store i64* @0, i64** %23, align 8
store i64 3000000000000, i64* %24, align 8
%127 = load i64*, i64** %23, align 8
%128 = load i64, i64* %127, align 8
%129 = load i64, i64* %24, align 8
%130 = icmp ne i64 %128, %129, !oh_verify !36
br i1 %130, label %131, label %assert.exit4
call void @exit(i32 1) #5
br label %UnifiedUnreachableBlock
%132 = load i32, i32* %33, align 4, !input_indep_block !33, !input_indep_instr !37, !data_indep_instr !38
%133 = zext i32 %132 to i64
store i64* @0, i64** %9, align 8
store i64 %133, i64* %10, align 8
%134 = load i64*, i64** %9, align 8
%135 = load i64, i64* %134, align 8
%136 = load i64, i64* %10, align 8
%137 = xor i64 %135, %136
%138 = load i64*, i64** %9, align 8
store i64 %137, i64* %138, align 8
%139 = zext i32 %132 to i64
store i64* @0, i64** %11, align 8
store i64 %139, i64* %12, align 8
%140 = load i64*, i64** %11, align 8
%141 = load i64, i64* %140, align 8
%142 = load i64, i64* %12, align 8
%143 = add nsw i64 %141, %142
%144 = load i64*, i64** %11, align 8
store i64 %143, i64* %144, align 8
store i64* @0, i64** %21, align 8
store i64 4000000000000, i64* %22, align 8
%145 = load i64*, i64** %21, align 8
%146 = load i64, i64* %145, align 8
%147 = load i64, i64* %22, align 8
%148 = icmp ne i64 %146, %147, !oh_verify !36
br i1 %148, label %149, label %assert.exit5
call void @exit(i32 1) #5
br label %UnifiedUnreachableBlock
ret i32 %132, !input_indep_instr !37, !data_indep_instr !38
unreachable
%3 = alloca i64*, align 8
%4 = alloca i64, align 8
%5 = alloca i64*, align 8
%6 = alloca i64, align 8
%7 = alloca i64*, align 8
%8 = alloca i64, align 8
%9 = alloca i64*, align 8
%10 = alloca i64, align 8
%11 = alloca i64*, align 8
%12 = alloca i64, align 8
%13 = alloca i64*, align 8
%14 = alloca i64, align 8
%15 = alloca i64*, align 8
%16 = alloca i64, align 8
%17 = alloca i64*, align 8
%18 = alloca i64, align 8
%19 = alloca i64*, align 8
%20 = alloca i64, align 8
%21 = alloca i64*, align 8
%22 = alloca i64, align 8
%23 = alloca i64*, align 8
%24 = alloca i64, align 8
%25 = alloca i64*, align 8
%26 = alloca i64, align 8
%27 = alloca i64*, align 8
%28 = alloca i64, align 8
%29 = alloca i64*, align 8
%30 = alloca i64, align 8
%31 = alloca i64*, align 8
%32 = alloca i64, align 8
%33 = alloca i64*, align 8
%34 = alloca i64, align 8
%35 = alloca i64*, align 8
%36 = alloca i64, align 8
%37 = alloca i64*, align 8
%38 = alloca i64, align 8
%39 = alloca i64*, align 8
%40 = alloca i64, align 8
%41 = alloca i64*, align 8
%42 = alloca i64, align 8
%43 = alloca i64*, align 8
%44 = alloca i64, align 8
%45 = alloca i64*, align 8
%46 = alloca i64, align 8
%47 = alloca i64*, align 8
%48 = alloca i64, align 8
%49 = alloca i64*, align 8
%50 = alloca i64, align 8
%51 = alloca i64*, align 8
%52 = alloca i64, align 8
%53 = alloca i64*, align 8
%54 = alloca i64, align 8
%55 = alloca i64*, align 8
%56 = alloca i64, align 8
%57 = alloca i64*, align 8
%58 = alloca i64, align 8
%59 = alloca i64*, align 8
%60 = alloca i64, align 8
%61 = alloca i64*, align 8
%62 = alloca i64, align 8
%63 = alloca i64*, align 8
%64 = alloca i64, align 8
%65 = alloca i64*, align 8
%66 = alloca i64, align 8
%67 = alloca i64*, align 8
%68 = alloca i64, align 8
%69 = alloca i64*, align 8
%70 = alloca i64, align 8
%71 = alloca i64*, align 8
%72 = alloca i64, align 8
%73 = alloca i64*, align 8
%74 = alloca i64, align 8
%75 = alloca i64*, align 8
%76 = alloca i64, align 8
%77 = alloca i64*, align 8
%78 = alloca i64, align 8
%79 = alloca i64*, align 8
%80 = alloca i64, align 8
%81 = alloca i64*, align 8
%82 = alloca i64, align 8
%83 = alloca i64*, align 8
%84 = alloca i64, align 8
%85 = alloca i64*, align 8
%86 = alloca i64, align 8
%87 = alloca i64*, align 8
%88 = alloca i64, align 8
%89 = alloca i64*, align 8
%90 = alloca i64, align 8
%91 = alloca i64*, align 8
%92 = alloca i64, align 8
%93 = alloca i64*, align 8
%94 = alloca i64, align 8
%95 = alloca i64*, align 8
%96 = alloca i64, align 8
%97 = alloca i64*, align 8
%98 = alloca i64, align 8
%99 = alloca i64*, align 8
%100 = alloca i64, align 8
%101 = alloca i64*, align 8
%102 = alloca i64, align 8
%103 = alloca i64*, align 8
%104 = alloca i64, align 8
%105 = alloca i64*, align 8
%106 = alloca i64, align 8
%107 = alloca i64*, align 8
%108 = alloca i64, align 8
%109 = alloca i64*, align 8
%110 = alloca i64, align 8
%111 = alloca i64*, align 8
%112 = alloca i64, align 8
%113 = alloca i64*, align 8
%114 = alloca i64, align 8
%115 = alloca i64*, align 8
%116 = alloca i64, align 8
%117 = alloca i64*, align 8
%118 = alloca i64, align 8
%119 = alloca i64*, align 8
%120 = alloca i64, align 8
%local_hash5 = alloca i64, align 8
store i64 0, i64* %local_hash5, align 8
%local_hash4 = alloca i64, align 8
store i64 0, i64* %local_hash4, align 8
%local_hash3 = alloca i64, align 8
store i64 0, i64* %local_hash3, align 8
%local_hash2 = alloca i64, align 8
store i64 0, i64* %local_hash2, align 8
%local_hash1 = alloca i64, align 8
store i64 0, i64* %local_hash1, align 8
%local_hash = alloca i64, align 8
store i64 0, i64* %local_hash, align 8
%121 = alloca i32, align 4, !input_indep_block !33, !input_dep_instr !34, !data_dep_instr !35, !control_dep_instr !36
%122 = alloca i8*, align 8, !input_dep_instr !34, !data_dep_instr !35, !control_dep_instr !36
%123 = alloca i8*, align 8, !input_dep_instr !34, !data_dep_instr !35, !control_dep_instr !36
%124 = alloca [26 x i32], align 16, !input_dep_instr !34, !data_dep_instr !35, !control_dep_instr !36
%125 = alloca [26 x i32], align 16, !input_dep_instr !34, !data_dep_instr !35, !control_dep_instr !36
%126 = alloca i32, align 4, !input_dep_instr !34, !data_dep_instr !35, !control_dep_instr !36
store i8* %0, i8** %122, align 8, !input_dep_instr !34, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
store i8* %1, i8** %123, align 8, !input_dep_instr !34, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%127 = bitcast [26 x i32]* %124 to i8*, !input_dep_instr !34, !data_dep_instr !35, !control_dep_instr !36
call void @llvm.memset.p0i8.i64(i8* align 16 %127, i8 0, i64 104, i1 false), !input_indep_instr !38, !data_indep_instr !39, !control_dep_instr !36
store i64* %local_hash5, i64** %107, align 8
store i64 0, i64* %108, align 8
%128 = load i64*, i64** %107, align 8
%129 = load i64, i64* %128, align 8
%130 = load i64, i64* %108, align 8
%131 = add nsw i64 %129, %130
%132 = load i64*, i64** %107, align 8
store i64 %131, i64* %132, align 8
store i64* %local_hash5, i64** %105, align 8
store i64 104, i64* %106, align 8
%133 = load i64*, i64** %105, align 8
%134 = load i64, i64* %133, align 8
%135 = load i64, i64* %106, align 8
%136 = add nsw i64 %134, %135
%137 = load i64*, i64** %105, align 8
store i64 %136, i64* %137, align 8
store i64* %local_hash5, i64** %55, align 8
store i64 0, i64* %56, align 8
%138 = load i64*, i64** %55, align 8
%139 = load i64, i64* %138, align 8
%140 = load i64, i64* %56, align 8
%141 = xor i64 %139, %140
%142 = load i64*, i64** %55, align 8
store i64 %141, i64* %142, align 8
store i64* %local_hash4, i64** %53, align 8
store i64 0, i64* %54, align 8
%143 = load i64*, i64** %53, align 8
%144 = load i64, i64* %143, align 8
%145 = load i64, i64* %54, align 8
%146 = xor i64 %144, %145
%147 = load i64*, i64** %53, align 8
store i64 %146, i64* %147, align 8
store i64* %local_hash4, i64** %103, align 8
store i64 104, i64* %104, align 8
%148 = load i64*, i64** %103, align 8
%149 = load i64, i64* %148, align 8
%150 = load i64, i64* %104, align 8
%151 = add nsw i64 %149, %150
%152 = load i64*, i64** %103, align 8
store i64 %151, i64* %152, align 8
store i64* %local_hash4, i64** %51, align 8
store i64 0, i64* %52, align 8
%153 = load i64*, i64** %51, align 8
%154 = load i64, i64* %153, align 8
%155 = load i64, i64* %52, align 8
%156 = xor i64 %154, %155
%157 = load i64*, i64** %51, align 8
store i64 %156, i64* %157, align 8
store i64* %local_hash3, i64** %101, align 8
store i64 0, i64* %102, align 8
%158 = load i64*, i64** %101, align 8
%159 = load i64, i64* %158, align 8
%160 = load i64, i64* %102, align 8
%161 = add nsw i64 %159, %160
%162 = load i64*, i64** %101, align 8
store i64 %161, i64* %162, align 8
store i64* %local_hash3, i64** %99, align 8
store i64 104, i64* %100, align 8
%163 = load i64*, i64** %99, align 8
%164 = load i64, i64* %163, align 8
%165 = load i64, i64* %100, align 8
%166 = add nsw i64 %164, %165
%167 = load i64*, i64** %99, align 8
store i64 %166, i64* %167, align 8
store i64* %local_hash3, i64** %97, align 8
store i64 0, i64* %98, align 8
%168 = load i64*, i64** %97, align 8
%169 = load i64, i64* %168, align 8
%170 = load i64, i64* %98, align 8
%171 = add nsw i64 %169, %170
%172 = load i64*, i64** %97, align 8
store i64 %171, i64* %172, align 8
store i64* %local_hash2, i64** %49, align 8
store i64 0, i64* %50, align 8
%173 = load i64*, i64** %49, align 8
%174 = load i64, i64* %173, align 8
%175 = load i64, i64* %50, align 8
%176 = xor i64 %174, %175
%177 = load i64*, i64** %49, align 8
store i64 %176, i64* %177, align 8
store i64* %local_hash2, i64** %47, align 8
store i64 104, i64* %48, align 8
%178 = load i64*, i64** %47, align 8
%179 = load i64, i64* %178, align 8
%180 = load i64, i64* %48, align 8
%181 = xor i64 %179, %180
%182 = load i64*, i64** %47, align 8
store i64 %181, i64* %182, align 8
store i64* %local_hash2, i64** %95, align 8
store i64 0, i64* %96, align 8
%183 = load i64*, i64** %95, align 8
%184 = load i64, i64* %183, align 8
%185 = load i64, i64* %96, align 8
%186 = add nsw i64 %184, %185
%187 = load i64*, i64** %95, align 8
store i64 %186, i64* %187, align 8
store i64* %local_hash1, i64** %45, align 8
store i64 0, i64* %46, align 8
%188 = load i64*, i64** %45, align 8
%189 = load i64, i64* %188, align 8
%190 = load i64, i64* %46, align 8
%191 = xor i64 %189, %190
%192 = load i64*, i64** %45, align 8
store i64 %191, i64* %192, align 8
store i64* %local_hash1, i64** %93, align 8
store i64 104, i64* %94, align 8
%193 = load i64*, i64** %93, align 8
%194 = load i64, i64* %193, align 8
%195 = load i64, i64* %94, align 8
%196 = add nsw i64 %194, %195
%197 = load i64*, i64** %93, align 8
store i64 %196, i64* %197, align 8
store i64* %local_hash1, i64** %91, align 8
store i64 0, i64* %92, align 8
%198 = load i64*, i64** %91, align 8
%199 = load i64, i64* %198, align 8
%200 = load i64, i64* %92, align 8
%201 = add nsw i64 %199, %200
%202 = load i64*, i64** %91, align 8
store i64 %201, i64* %202, align 8
store i64* %local_hash, i64** %43, align 8
store i64 0, i64* %44, align 8
%203 = load i64*, i64** %43, align 8
%204 = load i64, i64* %203, align 8
%205 = load i64, i64* %44, align 8
%206 = xor i64 %204, %205
%207 = load i64*, i64** %43, align 8
store i64 %206, i64* %207, align 8
store i64* %local_hash, i64** %41, align 8
store i64 104, i64* %42, align 8
%208 = load i64*, i64** %41, align 8
%209 = load i64, i64* %208, align 8
%210 = load i64, i64* %42, align 8
%211 = xor i64 %209, %210
%212 = load i64*, i64** %41, align 8
store i64 %211, i64* %212, align 8
store i64* %local_hash, i64** %39, align 8
store i64 0, i64* %40, align 8
%213 = load i64*, i64** %39, align 8
%214 = load i64, i64* %213, align 8
%215 = load i64, i64* %40, align 8
%216 = xor i64 %214, %215
%217 = load i64*, i64** %39, align 8
store i64 %216, i64* %217, align 8
%218 = bitcast [26 x i32]* %125 to i8*, !input_dep_instr !34, !data_dep_instr !35, !control_dep_instr !36
call void @llvm.memset.p0i8.i64(i8* align 16 %218, i8 0, i64 104, i1 false), !input_indep_instr !38, !data_indep_instr !39, !control_dep_instr !36
store i64* %local_hash5, i64** %89, align 8
store i64 0, i64* %90, align 8
%219 = load i64*, i64** %89, align 8
%220 = load i64, i64* %219, align 8
%221 = load i64, i64* %90, align 8
%222 = add nsw i64 %220, %221
%223 = load i64*, i64** %89, align 8
store i64 %222, i64* %223, align 8
store i64* %local_hash5, i64** %37, align 8
store i64 104, i64* %38, align 8
%224 = load i64*, i64** %37, align 8
%225 = load i64, i64* %224, align 8
%226 = load i64, i64* %38, align 8
%227 = xor i64 %225, %226
%228 = load i64*, i64** %37, align 8
store i64 %227, i64* %228, align 8
store i64* %local_hash5, i64** %87, align 8
store i64 0, i64* %88, align 8
%229 = load i64*, i64** %87, align 8
%230 = load i64, i64* %229, align 8
%231 = load i64, i64* %88, align 8
%232 = add nsw i64 %230, %231
%233 = load i64*, i64** %87, align 8
store i64 %232, i64* %233, align 8
store i64* %local_hash4, i64** %35, align 8
store i64 0, i64* %36, align 8
%234 = load i64*, i64** %35, align 8
%235 = load i64, i64* %234, align 8
%236 = load i64, i64* %36, align 8
%237 = xor i64 %235, %236
%238 = load i64*, i64** %35, align 8
store i64 %237, i64* %238, align 8
store i64* %local_hash4, i64** %33, align 8
store i64 104, i64* %34, align 8
%239 = load i64*, i64** %33, align 8
%240 = load i64, i64* %239, align 8
%241 = load i64, i64* %34, align 8
%242 = xor i64 %240, %241
%243 = load i64*, i64** %33, align 8
store i64 %242, i64* %243, align 8
store i64* %local_hash4, i64** %85, align 8
store i64 0, i64* %86, align 8
%244 = load i64*, i64** %85, align 8
%245 = load i64, i64* %244, align 8
%246 = load i64, i64* %86, align 8
%247 = add nsw i64 %245, %246
%248 = load i64*, i64** %85, align 8
store i64 %247, i64* %248, align 8
store i64* %local_hash3, i64** %83, align 8
store i64 0, i64* %84, align 8
%249 = load i64*, i64** %83, align 8
%250 = load i64, i64* %249, align 8
%251 = load i64, i64* %84, align 8
%252 = add nsw i64 %250, %251
%253 = load i64*, i64** %83, align 8
store i64 %252, i64* %253, align 8
store i64* %local_hash3, i64** %31, align 8
store i64 104, i64* %32, align 8
%254 = load i64*, i64** %31, align 8
%255 = load i64, i64* %254, align 8
%256 = load i64, i64* %32, align 8
%257 = xor i64 %255, %256
%258 = load i64*, i64** %31, align 8
store i64 %257, i64* %258, align 8
store i64* %local_hash3, i64** %81, align 8
store i64 0, i64* %82, align 8
%259 = load i64*, i64** %81, align 8
%260 = load i64, i64* %259, align 8
%261 = load i64, i64* %82, align 8
%262 = add nsw i64 %260, %261
%263 = load i64*, i64** %81, align 8
store i64 %262, i64* %263, align 8
store i64* %local_hash2, i64** %79, align 8
store i64 0, i64* %80, align 8
%264 = load i64*, i64** %79, align 8
%265 = load i64, i64* %264, align 8
%266 = load i64, i64* %80, align 8
%267 = add nsw i64 %265, %266
%268 = load i64*, i64** %79, align 8
store i64 %267, i64* %268, align 8
store i64* %local_hash2, i64** %77, align 8
store i64 104, i64* %78, align 8
%269 = load i64*, i64** %77, align 8
%270 = load i64, i64* %269, align 8
%271 = load i64, i64* %78, align 8
%272 = add nsw i64 %270, %271
%273 = load i64*, i64** %77, align 8
store i64 %272, i64* %273, align 8
store i64* %local_hash2, i64** %29, align 8
store i64 0, i64* %30, align 8
%274 = load i64*, i64** %29, align 8
%275 = load i64, i64* %274, align 8
%276 = load i64, i64* %30, align 8
%277 = xor i64 %275, %276
%278 = load i64*, i64** %29, align 8
store i64 %277, i64* %278, align 8
store i64* %local_hash1, i64** %75, align 8
store i64 0, i64* %76, align 8
%279 = load i64*, i64** %75, align 8
%280 = load i64, i64* %279, align 8
%281 = load i64, i64* %76, align 8
%282 = add nsw i64 %280, %281
%283 = load i64*, i64** %75, align 8
store i64 %282, i64* %283, align 8
store i64* %local_hash1, i64** %27, align 8
store i64 104, i64* %28, align 8
%284 = load i64*, i64** %27, align 8
%285 = load i64, i64* %284, align 8
%286 = load i64, i64* %28, align 8
%287 = xor i64 %285, %286
%288 = load i64*, i64** %27, align 8
store i64 %287, i64* %288, align 8
store i64* %local_hash1, i64** %25, align 8
store i64 0, i64* %26, align 8
%289 = load i64*, i64** %25, align 8
%290 = load i64, i64* %289, align 8
%291 = load i64, i64* %26, align 8
%292 = xor i64 %290, %291
%293 = load i64*, i64** %25, align 8
store i64 %292, i64* %293, align 8
store i64* %local_hash, i64** %73, align 8
store i64 0, i64* %74, align 8
%294 = load i64*, i64** %73, align 8
%295 = load i64, i64* %294, align 8
%296 = load i64, i64* %74, align 8
%297 = add nsw i64 %295, %296
%298 = load i64*, i64** %73, align 8
store i64 %297, i64* %298, align 8
store i64* %local_hash, i64** %23, align 8
store i64 104, i64* %24, align 8
%299 = load i64*, i64** %23, align 8
%300 = load i64, i64* %299, align 8
%301 = load i64, i64* %24, align 8
%302 = xor i64 %300, %301
%303 = load i64*, i64** %23, align 8
store i64 %302, i64* %303, align 8
store i64* %local_hash, i64** %21, align 8
store i64 0, i64* %22, align 8
%304 = load i64*, i64** %21, align 8
%305 = load i64, i64* %304, align 8
%306 = load i64, i64* %22, align 8
%307 = xor i64 %305, %306
%308 = load i64*, i64** %21, align 8
store i64 %307, i64* %308, align 8
store i32 0, i32* %126, align 4, !input_indep_instr !38, !data_indep_instr !39, !control_dep_instr !36
%309 = load i32, i32* %126
%310 = zext i32 %309 to i64
store i64* %local_hash5, i64** %19, align 8
store i64 %310, i64* %20, align 8
%311 = load i64*, i64** %19, align 8
%312 = load i64, i64* %311, align 8
%313 = load i64, i64* %20, align 8
%314 = xor i64 %312, %313
%315 = load i64*, i64** %19, align 8
store i64 %314, i64* %315, align 8
%316 = load i32, i32* %126
%317 = zext i32 %316 to i64
store i64* %local_hash4, i64** %71, align 8
store i64 %317, i64* %72, align 8
%318 = load i64*, i64** %71, align 8
%319 = load i64, i64* %318, align 8
%320 = load i64, i64* %72, align 8
%321 = add nsw i64 %319, %320
%322 = load i64*, i64** %71, align 8
store i64 %321, i64* %322, align 8
%323 = load i32, i32* %126
%324 = zext i32 %323 to i64
store i64* %local_hash3, i64** %17, align 8
store i64 %324, i64* %18, align 8
%325 = load i64*, i64** %17, align 8
%326 = load i64, i64* %325, align 8
%327 = load i64, i64* %18, align 8
%328 = xor i64 %326, %327
%329 = load i64*, i64** %17, align 8
store i64 %328, i64* %329, align 8
%330 = load i32, i32* %126
%331 = zext i32 %330 to i64
store i64* %local_hash2, i64** %69, align 8
store i64 %331, i64* %70, align 8
%332 = load i64*, i64** %69, align 8
%333 = load i64, i64* %332, align 8
%334 = load i64, i64* %70, align 8
%335 = add nsw i64 %333, %334
%336 = load i64*, i64** %69, align 8
store i64 %335, i64* %336, align 8
%337 = load i32, i32* %126
%338 = zext i32 %337 to i64
store i64* %local_hash1, i64** %67, align 8
store i64 %338, i64* %68, align 8
%339 = load i64*, i64** %67, align 8
%340 = load i64, i64* %339, align 8
%341 = load i64, i64* %68, align 8
%342 = add nsw i64 %340, %341
%343 = load i64*, i64** %67, align 8
store i64 %342, i64* %343, align 8
%344 = load i32, i32* %126
%345 = zext i32 %344 to i64
store i64* %local_hash, i64** %15, align 8
store i64 %345, i64* %16, align 8
%346 = load i64*, i64** %15, align 8
%347 = load i64, i64* %346, align 8
%348 = load i64, i64* %16, align 8
%349 = xor i64 %347, %348
%350 = load i64*, i64** %15, align 8
store i64 %349, i64* %350, align 8
%351 = load i64, i64* %local_hash
store i64 %351, i64* @1
store i64* @1, i64** %119, align 8
store i64 8000000000000, i64* %120, align 8
%352 = load i64*, i64** %119, align 8
%353 = load i64, i64* %352, align 8
%354 = load i64, i64* %120, align 8
%355 = icmp ne i64 %353, %354, !oh_verify !40
br i1 %355, label %356, label %assert.exit
call void @exit(i32 1) #5
br label %UnifiedUnreachableBlock
br label %357, !input_indep_instr !38, !data_indep_instr !39, !control_dep_instr !36
%358 = load i8*, i8** %122, align 8, !data_dep_instr !35, !argument_dep_instr !37, !input_dep_block !41, !control_dep_instr !36
%359 = load i32, i32* %126, align 4, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%360 = sext i32 %359 to i64, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%361 = getelementptr inbounds i8, i8* %358, i64 %360, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%362 = load i8, i8* %361, align 1, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%363 = sext i8 %362 to i32, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%364 = icmp ne i32 %363, 0, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
br i1 %364, label %365, label %379, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%366 = load i8*, i8** %122, align 8, !data_dep_instr !35, !argument_dep_instr !37, !input_dep_block !41, !control_dep_instr !36
%367 = load i32, i32* %126, align 4, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%368 = sext i32 %367 to i64, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%369 = getelementptr inbounds i8, i8* %366, i64 %368, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%370 = load i8, i8* %369, align 1, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%371 = sext i8 %370 to i32, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%372 = sub nsw i32 %371, 97, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%373 = sext i32 %372 to i64, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%374 = getelementptr inbounds [26 x i32], [26 x i32]* %124, i64 0, i64 %373, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%375 = load i32, i32* %374, align 4, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%376 = add nsw i32 %375, 1, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
store i32 %376, i32* %374, align 4, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%377 = load i32, i32* %126, align 4, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%378 = add nsw i32 %377, 1, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
store i32 %378, i32* %126, align 4, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
br label %357, !data_indep_instr !39, !argument_dep_instr !37, !control_dep_instr !36
store i32 0, i32* %126, align 4, !input_indep_block !33, !input_indep_instr !38, !data_indep_instr !39, !control_dep_instr !36
%380 = load i32, i32* %126
%381 = zext i32 %380 to i64
store i64* %local_hash5, i64** %65, align 8
store i64 %381, i64* %66, align 8
%382 = load i64*, i64** %65, align 8
%383 = load i64, i64* %382, align 8
%384 = load i64, i64* %66, align 8
%385 = add nsw i64 %383, %384
%386 = load i64*, i64** %65, align 8
store i64 %385, i64* %386, align 8
%387 = load i32, i32* %126
%388 = zext i32 %387 to i64
store i64* %local_hash4, i64** %13, align 8
store i64 %388, i64* %14, align 8
%389 = load i64*, i64** %13, align 8
%390 = load i64, i64* %389, align 8
%391 = load i64, i64* %14, align 8
%392 = xor i64 %390, %391
%393 = load i64*, i64** %13, align 8
store i64 %392, i64* %393, align 8
%394 = load i32, i32* %126
%395 = zext i32 %394 to i64
store i64* %local_hash3, i64** %11, align 8
store i64 %395, i64* %12, align 8
%396 = load i64*, i64** %11, align 8
%397 = load i64, i64* %396, align 8
%398 = load i64, i64* %12, align 8
%399 = xor i64 %397, %398
%400 = load i64*, i64** %11, align 8
store i64 %399, i64* %400, align 8
%401 = load i32, i32* %126
%402 = zext i32 %401 to i64
store i64* %local_hash2, i64** %9, align 8
store i64 %402, i64* %10, align 8
%403 = load i64*, i64** %9, align 8
%404 = load i64, i64* %403, align 8
%405 = load i64, i64* %10, align 8
%406 = xor i64 %404, %405
%407 = load i64*, i64** %9, align 8
store i64 %406, i64* %407, align 8
%408 = load i32, i32* %126
%409 = zext i32 %408 to i64
store i64* %local_hash1, i64** %63, align 8
store i64 %409, i64* %64, align 8
%410 = load i64*, i64** %63, align 8
%411 = load i64, i64* %410, align 8
%412 = load i64, i64* %64, align 8
%413 = add nsw i64 %411, %412
%414 = load i64*, i64** %63, align 8
store i64 %413, i64* %414, align 8
%415 = load i64, i64* %local_hash1
store i64 %415, i64* @1
store i64* @1, i64** %117, align 8
store i64 9000000000000, i64* %118, align 8
%416 = load i64*, i64** %117, align 8
%417 = load i64, i64* %416, align 8
%418 = load i64, i64* %118, align 8
%419 = icmp ne i64 %417, %418, !oh_verify !40
br i1 %419, label %420, label %assert.exit1
call void @exit(i32 1) #5
br label %UnifiedUnreachableBlock
br label %421, !input_indep_instr !38, !data_indep_instr !39, !control_dep_instr !36
%422 = load i8*, i8** %123, align 8, !data_dep_instr !35, !argument_dep_instr !37, !input_dep_block !41, !control_dep_instr !36
%423 = load i32, i32* %126, align 4, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%424 = sext i32 %423 to i64, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%425 = getelementptr inbounds i8, i8* %422, i64 %424, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%426 = load i8, i8* %425, align 1, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%427 = sext i8 %426 to i32, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%428 = icmp ne i32 %427, 0, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
br i1 %428, label %429, label %443, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%430 = load i8*, i8** %123, align 8, !data_dep_instr !35, !argument_dep_instr !37, !input_dep_block !41, !control_dep_instr !36
%431 = load i32, i32* %126, align 4, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%432 = sext i32 %431 to i64, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%433 = getelementptr inbounds i8, i8* %430, i64 %432, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%434 = load i8, i8* %433, align 1, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%435 = sext i8 %434 to i32, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%436 = sub nsw i32 %435, 97, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%437 = sext i32 %436 to i64, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%438 = getelementptr inbounds [26 x i32], [26 x i32]* %125, i64 0, i64 %437, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%439 = load i32, i32* %438, align 4, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%440 = add nsw i32 %439, 1, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
store i32 %440, i32* %438, align 4, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%441 = load i32, i32* %126, align 4, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%442 = add nsw i32 %441, 1, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
store i32 %442, i32* %126, align 4, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
br label %421, !data_indep_instr !39, !argument_dep_instr !37, !control_dep_instr !36
store i32 0, i32* %126, align 4, !input_indep_block !33, !input_indep_instr !38, !data_indep_instr !39, !control_dep_instr !36
%444 = load i32, i32* %126
%445 = zext i32 %444 to i64
store i64* %local_hash5, i64** %7, align 8
store i64 %445, i64* %8, align 8
%446 = load i64*, i64** %7, align 8
%447 = load i64, i64* %446, align 8
%448 = load i64, i64* %8, align 8
%449 = xor i64 %447, %448
%450 = load i64*, i64** %7, align 8
store i64 %449, i64* %450, align 8
%451 = load i32, i32* %126
%452 = zext i32 %451 to i64
store i64* %local_hash4, i64** %5, align 8
store i64 %452, i64* %6, align 8
%453 = load i64*, i64** %5, align 8
%454 = load i64, i64* %453, align 8
%455 = load i64, i64* %6, align 8
%456 = xor i64 %454, %455
%457 = load i64*, i64** %5, align 8
store i64 %456, i64* %457, align 8
%458 = load i32, i32* %126
%459 = zext i32 %458 to i64
store i64* %local_hash3, i64** %61, align 8
store i64 %459, i64* %62, align 8
%460 = load i64*, i64** %61, align 8
%461 = load i64, i64* %460, align 8
%462 = load i64, i64* %62, align 8
%463 = add nsw i64 %461, %462
%464 = load i64*, i64** %61, align 8
store i64 %463, i64* %464, align 8
%465 = load i32, i32* %126
%466 = zext i32 %465 to i64
store i64* %local_hash2, i64** %59, align 8
store i64 %466, i64* %60, align 8
%467 = load i64*, i64** %59, align 8
%468 = load i64, i64* %467, align 8
%469 = load i64, i64* %60, align 8
%470 = add nsw i64 %468, %469
%471 = load i64*, i64** %59, align 8
store i64 %470, i64* %471, align 8
%472 = load i64, i64* %local_hash3
store i64 %472, i64* @1
store i64* @1, i64** %115, align 8
store i64 11000000000000, i64* %116, align 8
%473 = load i64*, i64** %115, align 8
%474 = load i64, i64* %473, align 8
%475 = load i64, i64* %116, align 8
%476 = icmp ne i64 %474, %475, !oh_verify !40
br i1 %476, label %477, label %assert.exit2
call void @exit(i32 1) #5
br label %UnifiedUnreachableBlock
br label %478, !input_indep_instr !38, !data_indep_instr !39, !control_dep_instr !36
%479 = load i32, i32* %126, align 4, !data_dep_instr !35, !argument_dep_instr !37, !input_dep_block !41, !control_dep_instr !36
%480 = icmp slt i32 %479, 26, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
br i1 %480, label %481, label %507, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%482 = load i32, i32* %126, align 4, !data_dep_instr !35, !argument_dep_instr !37, !input_dep_block !41, !control_dep_instr !36
%483 = sext i32 %482 to i64, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%484 = getelementptr inbounds [26 x i32], [26 x i32]* %124, i64 0, i64 %483, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%485 = load i32, i32* %484, align 4, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%486 = load i32, i32* %126, align 4, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%487 = sext i32 %486 to i64, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%488 = getelementptr inbounds [26 x i32], [26 x i32]* %125, i64 0, i64 %487, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%489 = load i32, i32* %488, align 4, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
%490 = icmp ne i32 %485, %489, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
br i1 %490, label %491, label %505, !data_dep_instr !35, !argument_dep_instr !37, !control_dep_instr !36
store i32 0, i32* %121, align 4, !data_indep_instr !39, !argument_dep_instr !37, !input_dep_block !41, !control_dep_instr !36
%492 = load i32, i32* %121
%493 = zext i32 %492 to i64
store i64* %local_hash2, i64** %3, align 8
store i64 %493, i64* %4, align 8
%494 = load i64*, i64** %3, align 8
%495 = load i64, i64* %494, align 8
%496 = load i64, i64* %4, align 8
%497 = xor i64 %495, %496
%498 = load i64*, i64** %3, align 8
store i64 %497, i64* %498, align 8
%499 = load i64, i64* %local_hash2
store i64 %499, i64* @1
store i64* @1, i64** %113, align 8
store i64 10000000000000, i64* %114, align 8
%500 = load i64*, i64** %113, align 8
%501 = load i64, i64* %500, align 8
%502 = load i64, i64* %114, align 8
%503 = icmp ne i64 %501, %502, !oh_verify !40
br i1 %503, label %504, label %assert.exit3
call void @exit(i32 1) #5
br label %UnifiedUnreachableBlock
br label %521, !data_indep_instr !39, !argument_dep_instr !37, !control_dep_instr !36
br label %506, !data_indep_instr !39, !argument_dep_instr !37, !input_dep_block !41, !control_dep_instr !36
call void @check_anagram0(i32* %126), !data_indep_instr !39, !argument_dep_instr !37, !input_dep_block !41, !control_dep_instr !36
br label %478, !data_indep_instr !39, !argument_dep_instr !37, !control_dep_instr !36
store i32 1, i32* %121, align 4, !data_indep_instr !39, !argument_dep_instr !37, !input_dep_block !41, !control_dep_instr !36
%508 = load i32, i32* %121
%509 = zext i32 %508 to i64
store i64* %local_hash5, i64** %57, align 8
store i64 %509, i64* %58, align 8
%510 = load i64*, i64** %57, align 8
%511 = load i64, i64* %510, align 8
%512 = load i64, i64* %58, align 8
%513 = add nsw i64 %511, %512
%514 = load i64*, i64** %57, align 8
store i64 %513, i64* %514, align 8
%515 = load i64, i64* %local_hash5
store i64 %515, i64* @1
store i64* @1, i64** %111, align 8
store i64 13000000000000, i64* %112, align 8
%516 = load i64*, i64** %111, align 8
%517 = load i64, i64* %516, align 8
%518 = load i64, i64* %112, align 8
%519 = icmp ne i64 %517, %518, !oh_verify !40
br i1 %519, label %520, label %assert.exit4
call void @exit(i32 1) #5
br label %UnifiedUnreachableBlock
br label %521, !data_indep_instr !39, !argument_dep_instr !37, !control_dep_instr !36
%522 = load i32, i32* %121, align 4, !input_indep_block !33, !input_indep_instr !38, !data_indep_instr !39, !control_dep_instr !36
%523 = load i64, i64* %local_hash4
store i64 %523, i64* @1
store i64* @1, i64** %109, align 8
store i64 12000000000000, i64* %110, align 8
%524 = load i64*, i64** %109, align 8
%525 = load i64, i64* %524, align 8
%526 = load i64, i64* %110, align 8
%527 = icmp ne i64 %525, %526, !oh_verify !40
br i1 %527, label %528, label %assert.exit5
call void @exit(i32 1) #5
br label %UnifiedUnreachableBlock
ret i32 %522, !input_indep_instr !38, !data_indep_instr !39, !control_dep_instr !36
unreachable
%1 = alloca i64*, align 8
%2 = alloca i64, align 8
%3 = alloca i64*, align 8
%4 = alloca i64, align 8
%5 = alloca i64*, align 8
%6 = alloca i64, align 8
%7 = alloca i64, align 8
store i64 0, i64* %7, align 8
%8 = alloca i64, align 8
store i64 0, i64* %8, align 8
%9 = alloca i64, align 8
store i64 0, i64* %9, align 8
%10 = alloca i64, align 8
store i64 0, i64* %10, align 8
%11 = alloca i32, align 4, !input_indep_block !31, !input_dep_instr !32, !data_dep_instr !33
store i32 0, i32* %11, align 4, !input_indep_instr !34, !data_indep_instr !35
br label %12
store i64* %10, i64** %3, align 8
store i64 1, i64* %4, align 8
%13 = load i64*, i64** %3, align 8
%14 = load i64, i64* %13, align 8
%15 = load i64, i64* %4, align 8
%16 = add nsw i64 %14, %15
%17 = load i64*, i64** %3, align 8
store i64 %16, i64* %17, align 8
store i32 1, i32* %11, align 4, !data_indep_instr !35, !argument_dep_instr !36, !input_dep_block !37, !control_dep_instr !38
%18 = load i32, i32* %11
%19 = zext i32 %18 to i64
store i64* %10, i64** %1, align 8
store i64 %19, i64* %2, align 8
%20 = load i64*, i64** %1, align 8
%21 = load i64, i64* %20, align 8
%22 = load i64, i64* %2, align 8
%23 = add nsw i64 %21, %22
%24 = load i64*, i64** %1, align 8
store i64 %23, i64* %24, align 8
%25 = load i64, i64* %10
store i64 %25, i64* @1
store i64* @1, i64** %5, align 8
store i64 2000000000000, i64* %6, align 8
%26 = load i64*, i64** %5, align 8
%27 = load i64, i64* %26, align 8
%28 = load i64, i64* %6, align 8
%29 = icmp ne i64 %27, %28, !oh_verify !39
br i1 %29, label %30, label %assert.exit
call void @exit(i32 1) #5
unreachable
br label %exit
ret void
%1 = alloca i64*, align 8
%2 = alloca i64, align 8
%3 = alloca i64*, align 8
%4 = alloca i64, align 8
%5 = alloca i1
%6 = alloca i64, align 8
store i64 0, i64* %6, align 8
%7 = alloca i64, align 8
store i64 0, i64* %7, align 8
%8 = alloca i64, align 8
store i64 0, i64* %8, align 8
%9 = alloca i64, align 8
store i64 0, i64* %9, align 8
%10 = alloca i32, align 4, !input_indep_block !31, !input_dep_instr !32, !data_dep_instr !33
store i32 0, i32* %10, align 4, !input_indep_instr !34, !data_indep_instr !35
br label %11
br label %12
store i64* %8, i64** %1, align 8
store i64 1, i64* %2, align 8
%13 = load i64*, i64** %1, align 8
%14 = load i64, i64* %13, align 8
%15 = load i64, i64* %2, align 8
%16 = add nsw i64 %14, %15
%17 = load i64*, i64** %1, align 8
store i64 %16, i64* %17, align 8
%18 = load i64, i64* %8
store i64 %18, i64* @1
store i64* @1, i64** %3, align 8
store i64 5000000000000, i64* %4, align 8
%19 = load i64*, i64** %3, align 8
%20 = load i64, i64* %19, align 8
%21 = load i64, i64* %4, align 8
%22 = icmp ne i64 %20, %21, !oh_verify !36
br i1 %22, label %23, label %assert.exit
call void @exit(i32 1) #5
unreachable
br label %exit
ret void
%1 = alloca i64*, align 8
%2 = alloca i64, align 8
%3 = alloca i64*, align 8
%4 = alloca i64, align 8
%5 = alloca i1
%6 = alloca i64, align 8
store i64 0, i64* %6, align 8
%7 = alloca i64, align 8
store i64 0, i64* %7, align 8
%8 = alloca i64, align 8
store i64 0, i64* %8, align 8
%9 = alloca i64, align 8
store i64 0, i64* %9, align 8
%10 = alloca i32, align 4, !input_indep_block !31, !input_dep_instr !32, !data_dep_instr !33
store i32 0, i32* %10, align 4, !input_indep_instr !34, !data_indep_instr !35
br label %11
br label %12
store i32 0, i32* %10, align 4, !data_indep_instr !35, !argument_dep_instr !36, !input_dep_block !37, !control_dep_instr !38
%13 = load i32, i32* %10
%14 = zext i32 %13 to i64
store i64* %7, i64** %1, align 8
store i64 %14, i64* %2, align 8
%15 = load i64*, i64** %1, align 8
%16 = load i64, i64* %15, align 8
%17 = load i64, i64* %2, align 8
%18 = add nsw i64 %16, %17
%19 = load i64*, i64** %1, align 8
store i64 %18, i64* %19, align 8
%20 = load i64, i64* %7
store i64 %20, i64* @1
store i64* @1, i64** %3, align 8
store i64 6000000000000, i64* %4, align 8
%21 = load i64*, i64** %3, align 8
%22 = load i64, i64* %21, align 8
%23 = load i64, i64* %4, align 8
%24 = icmp ne i64 %22, %23, !oh_verify !39
br i1 %24, label %25, label %assert.exit
call void @exit(i32 1) #5
unreachable
br label %exit
ret void
%1 = alloca i64*, align 8
%2 = alloca i64, align 8
%3 = alloca i64*, align 8
%4 = alloca i64, align 8
%5 = alloca i1
%6 = alloca i64, align 8
store i64 0, i64* %6, align 8
%7 = alloca i64, align 8
store i64 0, i64* %7, align 8
%8 = alloca i64, align 8
store i64 0, i64* %8, align 8
%9 = alloca i64, align 8
store i64 0, i64* %9, align 8
%10 = alloca i32, align 4, !input_indep_block !31, !input_dep_instr !32, !data_dep_instr !33
store i32 0, i32* %10, align 4, !input_indep_instr !34, !data_indep_instr !35
br label %11
br label %12
store i64* %6, i64** %1, align 8
store i64 0, i64* %2, align 8
%13 = load i64*, i64** %1, align 8
%14 = load i64, i64* %13, align 8
%15 = load i64, i64* %2, align 8
%16 = add nsw i64 %14, %15
%17 = load i64*, i64** %1, align 8
store i64 %16, i64* %17, align 8
%18 = load i64, i64* %6
store i64 %18, i64* @1
store i64* @1, i64** %3, align 8
store i64 7000000000000, i64* %4, align 8
%19 = load i64*, i64** %3, align 8
%20 = load i64, i64* %19, align 8
%21 = load i64, i64* %4, align 8
%22 = icmp ne i64 %20, %21, !oh_verify !36
br i1 %22, label %23, label %assert.exit
call void @exit(i32 1) #5
unreachable
br label %exit
ret void
%1 = alloca i64*, align 8
%2 = alloca i64, align 8
%3 = alloca i64*, align 8
%4 = alloca i64, align 8
%5 = alloca i64*, align 8
%6 = alloca i64, align 8
%7 = alloca i64*, align 8
%8 = alloca i64, align 8
%9 = alloca i64*, align 8
%10 = alloca i64, align 8
%11 = alloca i64*, align 8
%12 = alloca i64, align 8
%13 = alloca i64*, align 8
%14 = alloca i64, align 8
%15 = alloca i64*, align 8
%16 = alloca i64, align 8
%17 = alloca i64, align 8
store i64 0, i64* %17, align 8
%18 = alloca i64, align 8
store i64 0, i64* %18, align 8
%19 = alloca i64, align 8
store i64 0, i64* %19, align 8
%20 = alloca i64, align 8
store i64 0, i64* %20, align 8
%21 = alloca i64, align 8
store i64 0, i64* %21, align 8
%22 = alloca i64, align 8
store i64 0, i64* %22, align 8
%23 = alloca [26 x i32], align 16, !input_dep_instr !31, !data_dep_instr !32, !control_dep_instr !33
%24 = alloca [26 x i32], align 16, !input_dep_instr !31, !data_dep_instr !32, !control_dep_instr !33
%25 = alloca i32, align 4, !input_dep_instr !31, !data_dep_instr !32, !control_dep_instr !33
%26 = bitcast [26 x i32]* %23 to i8*, !input_dep_instr !31, !data_dep_instr !32, !control_dep_instr !33
call void @llvm.memset.p0i8.i64(i8* align 16 %26, i8 0, i64 104, i1 false), !input_indep_instr !34, !data_indep_instr !35, !control_dep_instr !33
store i64* %22, i64** %11, align 8
store i64 0, i64* %12, align 8
%27 = load i64*, i64** %11, align 8
%28 = load i64, i64* %27, align 8
%29 = load i64, i64* %12, align 8
%30 = xor i64 %28, %29
%31 = load i64*, i64** %11, align 8
store i64 %30, i64* %31, align 8
store i64* %22, i64** %9, align 8
store i64 104, i64* %10, align 8
%32 = load i64*, i64** %9, align 8
%33 = load i64, i64* %32, align 8
%34 = load i64, i64* %10, align 8
%35 = xor i64 %33, %34
%36 = load i64*, i64** %9, align 8
store i64 %35, i64* %36, align 8
store i64* %22, i64** %7, align 8
store i64 0, i64* %8, align 8
%37 = load i64*, i64** %7, align 8
%38 = load i64, i64* %37, align 8
%39 = load i64, i64* %8, align 8
%40 = xor i64 %38, %39
%41 = load i64*, i64** %7, align 8
store i64 %40, i64* %41, align 8
%42 = bitcast [26 x i32]* %24 to i8*, !input_dep_instr !31, !data_dep_instr !32, !control_dep_instr !33
call void @llvm.memset.p0i8.i64(i8* align 16 %42, i8 0, i64 104, i1 false), !input_indep_instr !34, !data_indep_instr !35, !control_dep_instr !33
store i64* %22, i64** %13, align 8
store i64 0, i64* %14, align 8
%43 = load i64*, i64** %13, align 8
%44 = load i64, i64* %43, align 8
%45 = load i64, i64* %14, align 8
%46 = add nsw i64 %44, %45
%47 = load i64*, i64** %13, align 8
store i64 %46, i64* %47, align 8
store i64* %22, i64** %5, align 8
store i64 104, i64* %6, align 8
%48 = load i64*, i64** %5, align 8
%49 = load i64, i64* %48, align 8
%50 = load i64, i64* %6, align 8
%51 = xor i64 %49, %50
%52 = load i64*, i64** %5, align 8
store i64 %51, i64* %52, align 8
store i64* %22, i64** %3, align 8
store i64 0, i64* %4, align 8
%53 = load i64*, i64** %3, align 8
%54 = load i64, i64* %53, align 8
%55 = load i64, i64* %4, align 8
%56 = xor i64 %54, %55
%57 = load i64*, i64** %3, align 8
store i64 %56, i64* %57, align 8
store i32 0, i32* %25, align 4, !input_indep_instr !34, !data_indep_instr !35, !control_dep_instr !33
%58 = load i32, i32* %25
%59 = zext i32 %58 to i64
store i64* %22, i64** %1, align 8
store i64 %59, i64* %2, align 8
%60 = load i64*, i64** %1, align 8
%61 = load i64, i64* %60, align 8
%62 = load i64, i64* %2, align 8
%63 = xor i64 %61, %62
%64 = load i64*, i64** %1, align 8
store i64 %63, i64* %64, align 8
%65 = load i64, i64* %22
store i64 %65, i64* @1
store i64* @1, i64** %15, align 8
store i64 8000000000000, i64* %16, align 8
%66 = load i64*, i64** %15, align 8
%67 = load i64, i64* %66, align 8
%68 = load i64, i64* %16, align 8
%69 = icmp ne i64 %67, %68, !oh_verify !36
br i1 %69, label %70, label %assert.exit
call void @exit(i32 1) #5
unreachable
br label %exit
ret void
%1 = alloca i64*, align 8
%2 = alloca i64, align 8
%3 = alloca i64*, align 8
%4 = alloca i64, align 8
%5 = alloca i64*, align 8
%6 = alloca i64, align 8
%7 = alloca i64*, align 8
%8 = alloca i64, align 8
%9 = alloca i64*, align 8
%10 = alloca i64, align 8
%11 = alloca i64*, align 8
%12 = alloca i64, align 8
%13 = alloca i64*, align 8
%14 = alloca i64, align 8
%15 = alloca i64*, align 8
%16 = alloca i64, align 8
%17 = alloca i64*, align 8
%18 = alloca i64, align 8
%19 = alloca i64, align 8
store i64 0, i64* %19, align 8
%20 = alloca i64, align 8
store i64 0, i64* %20, align 8
%21 = alloca i64, align 8
store i64 0, i64* %21, align 8
%22 = alloca i64, align 8
store i64 0, i64* %22, align 8
%23 = alloca i64, align 8
store i64 0, i64* %23, align 8
%24 = alloca i64, align 8
store i64 0, i64* %24, align 8
%25 = alloca [26 x i32], align 16, !input_dep_instr !31, !data_dep_instr !32, !control_dep_instr !33
%26 = alloca [26 x i32], align 16, !input_dep_instr !31, !data_dep_instr !32, !control_dep_instr !33
%27 = alloca i32, align 4, !input_dep_instr !31, !data_dep_instr !32, !control_dep_instr !33
%28 = bitcast [26 x i32]* %25 to i8*, !input_dep_instr !31, !data_dep_instr !32, !control_dep_instr !33
call void @llvm.memset.p0i8.i64(i8* align 16 %28, i8 0, i64 104, i1 false), !input_indep_instr !34, !data_indep_instr !35, !control_dep_instr !33
store i64* %23, i64** %5, align 8
store i64 0, i64* %6, align 8
%29 = load i64*, i64** %5, align 8
%30 = load i64, i64* %29, align 8
%31 = load i64, i64* %6, align 8
%32 = xor i64 %30, %31
%33 = load i64*, i64** %5, align 8
store i64 %32, i64* %33, align 8
store i64* %23, i64** %15, align 8
store i64 104, i64* %16, align 8
%34 = load i64*, i64** %15, align 8
%35 = load i64, i64* %34, align 8
%36 = load i64, i64* %16, align 8
%37 = add nsw i64 %35, %36
%38 = load i64*, i64** %15, align 8
store i64 %37, i64* %38, align 8
store i64* %23, i64** %13, align 8
store i64 0, i64* %14, align 8
%39 = load i64*, i64** %13, align 8
%40 = load i64, i64* %39, align 8
%41 = load i64, i64* %14, align 8
%42 = add nsw i64 %40, %41
%43 = load i64*, i64** %13, align 8
store i64 %42, i64* %43, align 8
%44 = bitcast [26 x i32]* %26 to i8*, !input_dep_instr !31, !data_dep_instr !32, !control_dep_instr !33
call void @llvm.memset.p0i8.i64(i8* align 16 %44, i8 0, i64 104, i1 false), !input_indep_instr !34, !data_indep_instr !35, !control_dep_instr !33
store i64* %23, i64** %11, align 8
store i64 0, i64* %12, align 8
%45 = load i64*, i64** %11, align 8
%46 = load i64, i64* %45, align 8
%47 = load i64, i64* %12, align 8
%48 = add nsw i64 %46, %47
%49 = load i64*, i64** %11, align 8
store i64 %48, i64* %49, align 8
store i64* %23, i64** %3, align 8
store i64 104, i64* %4, align 8
%50 = load i64*, i64** %3, align 8
%51 = load i64, i64* %50, align 8
%52 = load i64, i64* %4, align 8
%53 = xor i64 %51, %52
%54 = load i64*, i64** %3, align 8
store i64 %53, i64* %54, align 8
store i64* %23, i64** %1, align 8
store i64 0, i64* %2, align 8
%55 = load i64*, i64** %1, align 8
%56 = load i64, i64* %55, align 8
%57 = load i64, i64* %2, align 8
%58 = xor i64 %56, %57
%59 = load i64*, i64** %1, align 8
store i64 %58, i64* %59, align 8
store i32 0, i32* %27, align 4, !input_indep_instr !34, !data_indep_instr !35, !control_dep_instr !33
%60 = load i32, i32* %27
%61 = zext i32 %60 to i64
store i64* %23, i64** %9, align 8
store i64 %61, i64* %10, align 8
%62 = load i64*, i64** %9, align 8
%63 = load i64, i64* %62, align 8
%64 = load i64, i64* %10, align 8
%65 = add nsw i64 %63, %64
%66 = load i64*, i64** %9, align 8
store i64 %65, i64* %66, align 8
%67 = load i64, i64* %24
store i64 %67, i64* @1
br label %68
store i32 0, i32* %27, align 4, !input_indep_block !36, !input_indep_instr !34, !data_indep_instr !35, !control_dep_instr !33
%69 = load i32, i32* %27
%70 = zext i32 %69 to i64
store i64* %23, i64** %7, align 8
store i64 %70, i64* %8, align 8
%71 = load i64*, i64** %7, align 8
%72 = load i64, i64* %71, align 8
%73 = load i64, i64* %8, align 8
%74 = add nsw i64 %72, %73
%75 = load i64*, i64** %7, align 8
store i64 %74, i64* %75, align 8
%76 = load i64, i64* %23
store i64 %76, i64* @1
store i64* @1, i64** %17, align 8
store i64 9000000000000, i64* %18, align 8
%77 = load i64*, i64** %17, align 8
%78 = load i64, i64* %77, align 8
%79 = load i64, i64* %18, align 8
%80 = icmp ne i64 %78, %79, !oh_verify !37
br i1 %80, label %81, label %assert.exit
call void @exit(i32 1) #5
unreachable
br label %exit
ret void
%1 = alloca i64*, align 8
%2 = alloca i64, align 8
%3 = alloca i64*, align 8
%4 = alloca i64, align 8
%5 = alloca i64*, align 8
%6 = alloca i64, align 8
%7 = alloca i64*, align 8
%8 = alloca i64, align 8
%9 = alloca i64*, align 8
%10 = alloca i64, align 8
%11 = alloca i64*, align 8
%12 = alloca i64, align 8
%13 = alloca i64*, align 8
%14 = alloca i64, align 8
%15 = alloca i64*, align 8
%16 = alloca i64, align 8
%17 = alloca i64*, align 8
%18 = alloca i64, align 8
%19 = alloca i64*, align 8
%20 = alloca i64, align 8
%21 = alloca i64*, align 8
%22 = alloca i64, align 8
%23 = alloca i64, align 8
store i64 0, i64* %23, align 8
%24 = alloca i64, align 8
store i64 0, i64* %24, align 8
%25 = alloca i64, align 8
store i64 0, i64* %25, align 8
%26 = alloca i64, align 8
store i64 0, i64* %26, align 8
%27 = alloca i64, align 8
store i64 0, i64* %27, align 8
%28 = alloca i64, align 8
store i64 0, i64* %28, align 8
%29 = alloca i32, align 4, !input_indep_block !31, !input_dep_instr !32, !data_dep_instr !33, !control_dep_instr !34
%30 = alloca [26 x i32], align 16, !input_dep_instr !32, !data_dep_instr !33, !control_dep_instr !34
%31 = alloca [26 x i32], align 16, !input_dep_instr !32, !data_dep_instr !33, !control_dep_instr !34
%32 = alloca i32, align 4, !input_dep_instr !32, !data_dep_instr !33, !control_dep_instr !34
%33 = bitcast [26 x i32]* %30 to i8*, !input_dep_instr !32, !data_dep_instr !33, !control_dep_instr !34
call void @llvm.memset.p0i8.i64(i8* align 16 %33, i8 0, i64 104, i1 false), !input_indep_instr !35, !data_indep_instr !36, !control_dep_instr !34
store i64* %26, i64** %9, align 8
store i64 0, i64* %10, align 8
%34 = load i64*, i64** %9, align 8
%35 = load i64, i64* %34, align 8
%36 = load i64, i64* %10, align 8
%37 = xor i64 %35, %36
%38 = load i64*, i64** %9, align 8
store i64 %37, i64* %38, align 8
store i64* %26, i64** %7, align 8
store i64 104, i64* %8, align 8
%39 = load i64*, i64** %7, align 8
%40 = load i64, i64* %39, align 8
%41 = load i64, i64* %8, align 8
%42 = xor i64 %40, %41
%43 = load i64*, i64** %7, align 8
store i64 %42, i64* %43, align 8
store i64* %26, i64** %19, align 8
store i64 0, i64* %20, align 8
%44 = load i64*, i64** %19, align 8
%45 = load i64, i64* %44, align 8
%46 = load i64, i64* %20, align 8
%47 = add nsw i64 %45, %46
%48 = load i64*, i64** %19, align 8
store i64 %47, i64* %48, align 8
%49 = bitcast [26 x i32]* %31 to i8*, !input_dep_instr !32, !data_dep_instr !33, !control_dep_instr !34
call void @llvm.memset.p0i8.i64(i8* align 16 %49, i8 0, i64 104, i1 false), !input_indep_instr !35, !data_indep_instr !36, !control_dep_instr !34
store i64* %26, i64** %17, align 8
store i64 0, i64* %18, align 8
%50 = load i64*, i64** %17, align 8
%51 = load i64, i64* %50, align 8
%52 = load i64, i64* %18, align 8
%53 = add nsw i64 %51, %52
%54 = load i64*, i64** %17, align 8
store i64 %53, i64* %54, align 8
store i64* %26, i64** %15, align 8
store i64 104, i64* %16, align 8
%55 = load i64*, i64** %15, align 8
%56 = load i64, i64* %55, align 8
%57 = load i64, i64* %16, align 8
%58 = add nsw i64 %56, %57
%59 = load i64*, i64** %15, align 8
store i64 %58, i64* %59, align 8
store i64* %26, i64** %5, align 8
store i64 0, i64* %6, align 8
%60 = load i64*, i64** %5, align 8
%61 = load i64, i64* %60, align 8
%62 = load i64, i64* %6, align 8
%63 = xor i64 %61, %62
%64 = load i64*, i64** %5, align 8
store i64 %63, i64* %64, align 8
store i32 0, i32* %32, align 4, !input_indep_instr !35, !data_indep_instr !36, !control_dep_instr !34
%65 = load i32, i32* %32
%66 = zext i32 %65 to i64
store i64* %26, i64** %13, align 8
store i64 %66, i64* %14, align 8
%67 = load i64*, i64** %13, align 8
%68 = load i64, i64* %67, align 8
%69 = load i64, i64* %14, align 8
%70 = add nsw i64 %68, %69
%71 = load i64*, i64** %13, align 8
store i64 %70, i64* %71, align 8
%72 = load i64, i64* %28
store i64 %72, i64* @1
br label %73
store i32 0, i32* %32, align 4, !input_indep_block !31, !input_indep_instr !35, !data_indep_instr !36, !control_dep_instr !34
%74 = load i32, i32* %32
%75 = zext i32 %74 to i64
store i64* %26, i64** %3, align 8
store i64 %75, i64* %4, align 8
%76 = load i64*, i64** %3, align 8
%77 = load i64, i64* %76, align 8
%78 = load i64, i64* %4, align 8
%79 = xor i64 %77, %78
%80 = load i64*, i64** %3, align 8
store i64 %79, i64* %80, align 8
%81 = load i64, i64* %27
store i64 %81, i64* @1
br label %82
store i32 0, i32* %32, align 4, !input_indep_block !31, !input_indep_instr !35, !data_indep_instr !36, !control_dep_instr !34
%83 = load i32, i32* %32
%84 = zext i32 %83 to i64
store i64* %26, i64** %11, align 8
store i64 %84, i64* %12, align 8
%85 = load i64*, i64** %11, align 8
%86 = load i64, i64* %85, align 8
%87 = load i64, i64* %12, align 8
%88 = add nsw i64 %86, %87
%89 = load i64*, i64** %11, align 8
store i64 %88, i64* %89, align 8
%90 = load i64, i64* %25
store i64 %90, i64* @1
br label %91
store i32 0, i32* %29, align 4, !data_indep_instr !36, !argument_dep_instr !37, !input_dep_block !38, !control_dep_instr !34
%92 = load i32, i32* %29
%93 = zext i32 %92 to i64
store i64* %26, i64** %1, align 8
store i64 %93, i64* %2, align 8
%94 = load i64*, i64** %1, align 8
%95 = load i64, i64* %94, align 8
%96 = load i64, i64* %2, align 8
%97 = xor i64 %95, %96
%98 = load i64*, i64** %1, align 8
store i64 %97, i64* %98, align 8
%99 = load i64, i64* %26
store i64 %99, i64* @1
store i64* @1, i64** %21, align 8
store i64 10000000000000, i64* %22, align 8
%100 = load i64*, i64** %21, align 8
%101 = load i64, i64* %100, align 8
%102 = load i64, i64* %22, align 8
%103 = icmp ne i64 %101, %102, !oh_verify !39
br i1 %103, label %104, label %assert.exit
call void @exit(i32 1) #5
unreachable
br label %exit
ret void
%1 = alloca i64*, align 8
%2 = alloca i64, align 8
%3 = alloca i64*, align 8
%4 = alloca i64, align 8
%5 = alloca i64*, align 8
%6 = alloca i64, align 8
%7 = alloca i64*, align 8
%8 = alloca i64, align 8
%9 = alloca i64*, align 8
%10 = alloca i64, align 8
%11 = alloca i64*, align 8
%12 = alloca i64, align 8
%13 = alloca i64*, align 8
%14 = alloca i64, align 8
%15 = alloca i64*, align 8
%16 = alloca i64, align 8
%17 = alloca i64*, align 8
%18 = alloca i64, align 8
%19 = alloca i64*, align 8
%20 = alloca i64, align 8
%21 = alloca i64, align 8
store i64 0, i64* %21, align 8
%22 = alloca i64, align 8
store i64 0, i64* %22, align 8
%23 = alloca i64, align 8
store i64 0, i64* %23, align 8
%24 = alloca i64, align 8
store i64 0, i64* %24, align 8
%25 = alloca i64, align 8
store i64 0, i64* %25, align 8
%26 = alloca i64, align 8
store i64 0, i64* %26, align 8
%27 = alloca [26 x i32], align 16, !input_dep_instr !31, !data_dep_instr !32, !control_dep_instr !33
%28 = alloca [26 x i32], align 16, !input_dep_instr !31, !data_dep_instr !32, !control_dep_instr !33
%29 = alloca i32, align 4, !input_dep_instr !31, !data_dep_instr !32, !control_dep_instr !33
%30 = bitcast [26 x i32]* %27 to i8*, !input_dep_instr !31, !data_dep_instr !32, !control_dep_instr !33
call void @llvm.memset.p0i8.i64(i8* align 16 %30, i8 0, i64 104, i1 false), !input_indep_instr !34, !data_indep_instr !35, !control_dep_instr !33
store i64* %23, i64** %17, align 8
store i64 0, i64* %18, align 8
%31 = load i64*, i64** %17, align 8
%32 = load i64, i64* %31, align 8
%33 = load i64, i64* %18, align 8
%34 = add nsw i64 %32, %33
%35 = load i64*, i64** %17, align 8
store i64 %34, i64* %35, align 8
store i64* %23, i64** %15, align 8
store i64 104, i64* %16, align 8
%36 = load i64*, i64** %15, align 8
%37 = load i64, i64* %36, align 8
%38 = load i64, i64* %16, align 8
%39 = add nsw i64 %37, %38
%40 = load i64*, i64** %15, align 8
store i64 %39, i64* %40, align 8
store i64* %23, i64** %13, align 8
store i64 0, i64* %14, align 8
%41 = load i64*, i64** %13, align 8
%42 = load i64, i64* %41, align 8
%43 = load i64, i64* %14, align 8
%44 = add nsw i64 %42, %43
%45 = load i64*, i64** %13, align 8
store i64 %44, i64* %45, align 8
%46 = bitcast [26 x i32]* %28 to i8*, !input_dep_instr !31, !data_dep_instr !32, !control_dep_instr !33
call void @llvm.memset.p0i8.i64(i8* align 16 %46, i8 0, i64 104, i1 false), !input_indep_instr !34, !data_indep_instr !35, !control_dep_instr !33
store i64* %23, i64** %11, align 8
store i64 0, i64* %12, align 8
%47 = load i64*, i64** %11, align 8
%48 = load i64, i64* %47, align 8
%49 = load i64, i64* %12, align 8
%50 = add nsw i64 %48, %49
%51 = load i64*, i64** %11, align 8
store i64 %50, i64* %51, align 8
store i64* %23, i64** %5, align 8
store i64 104, i64* %6, align 8
%52 = load i64*, i64** %5, align 8
%53 = load i64, i64* %52, align 8
%54 = load i64, i64* %6, align 8
%55 = xor i64 %53, %54
%56 = load i64*, i64** %5, align 8
store i64 %55, i64* %56, align 8
store i64* %23, i64** %9, align 8
store i64 0, i64* %10, align 8
%57 = load i64*, i64** %9, align 8
%58 = load i64, i64* %57, align 8
%59 = load i64, i64* %10, align 8
%60 = add nsw i64 %58, %59
%61 = load i64*, i64** %9, align 8
store i64 %60, i64* %61, align 8
store i32 0, i32* %29, align 4, !input_indep_instr !34, !data_indep_instr !35, !control_dep_instr !33
%62 = load i32, i32* %29
%63 = zext i32 %62 to i64
store i64* %23, i64** %3, align 8
store i64 %63, i64* %4, align 8
%64 = load i64*, i64** %3, align 8
%65 = load i64, i64* %64, align 8
%66 = load i64, i64* %4, align 8
%67 = xor i64 %65, %66
%68 = load i64*, i64** %3, align 8
store i64 %67, i64* %68, align 8
%69 = load i64, i64* %26
store i64 %69, i64* @1
br label %70
store i32 0, i32* %29, align 4, !input_indep_block !36, !input_indep_instr !34, !data_indep_instr !35, !control_dep_instr !33
%71 = load i32, i32* %29
%72 = zext i32 %71 to i64
store i64* %23, i64** %1, align 8
store i64 %72, i64* %2, align 8
%73 = load i64*, i64** %1, align 8
%74 = load i64, i64* %73, align 8
%75 = load i64, i64* %2, align 8
%76 = xor i64 %74, %75
%77 = load i64*, i64** %1, align 8
store i64 %76, i64* %77, align 8
%78 = load i64, i64* %25
store i64 %78, i64* @1
br label %79
store i32 0, i32* %29, align 4, !input_indep_block !36, !input_indep_instr !34, !data_indep_instr !35, !control_dep_instr !33
%80 = load i32, i32* %29
%81 = zext i32 %80 to i64
store i64* %23, i64** %7, align 8
store i64 %81, i64* %8, align 8
%82 = load i64*, i64** %7, align 8
%83 = load i64, i64* %82, align 8
%84 = load i64, i64* %8, align 8
%85 = add nsw i64 %83, %84
%86 = load i64*, i64** %7, align 8
store i64 %85, i64* %86, align 8
%87 = load i64, i64* %23
store i64 %87, i64* @1
store i64* @1, i64** %19, align 8
store i64 11000000000000, i64* %20, align 8
%88 = load i64*, i64** %19, align 8
%89 = load i64, i64* %88, align 8
%90 = load i64, i64* %20, align 8
%91 = icmp ne i64 %89, %90, !oh_verify !37
br i1 %91, label %92, label %assert.exit
call void @exit(i32 1) #5
unreachable
br label %exit
ret void
%1 = alloca i64*, align 8
%2 = alloca i64, align 8
%3 = alloca i64*, align 8
%4 = alloca i64, align 8
%5 = alloca i64*, align 8
%6 = alloca i64, align 8
%7 = alloca i64*, align 8
%8 = alloca i64, align 8
%9 = alloca i64*, align 8
%10 = alloca i64, align 8
%11 = alloca i64*, align 8
%12 = alloca i64, align 8
%13 = alloca i64*, align 8
%14 = alloca i64, align 8
%15 = alloca i64*, align 8
%16 = alloca i64, align 8
%17 = alloca i64*, align 8
%18 = alloca i64, align 8
%19 = alloca i64*, align 8
%20 = alloca i64, align 8
%21 = alloca i64, align 8
store i64 0, i64* %21, align 8
%22 = alloca i64, align 8
store i64 0, i64* %22, align 8
%23 = alloca i64, align 8
store i64 0, i64* %23, align 8
%24 = alloca i64, align 8
store i64 0, i64* %24, align 8
%25 = alloca i64, align 8
store i64 0, i64* %25, align 8
%26 = alloca i64, align 8
store i64 0, i64* %26, align 8
%27 = alloca i32, align 4, !input_indep_block !31, !input_dep_instr !32, !data_dep_instr !33, !control_dep_instr !34
%28 = alloca [26 x i32], align 16, !input_dep_instr !32, !data_dep_instr !33, !control_dep_instr !34
%29 = alloca [26 x i32], align 16, !input_dep_instr !32, !data_dep_instr !33, !control_dep_instr !34
%30 = alloca i32, align 4, !input_dep_instr !32, !data_dep_instr !33, !control_dep_instr !34
%31 = bitcast [26 x i32]* %28 to i8*, !input_dep_instr !32, !data_dep_instr !33, !control_dep_instr !34
call void @llvm.memset.p0i8.i64(i8* align 16 %31, i8 0, i64 104, i1 false), !input_indep_instr !35, !data_indep_instr !36, !control_dep_instr !34
store i64* %22, i64** %11, align 8
store i64 0, i64* %12, align 8
%32 = load i64*, i64** %11, align 8
%33 = load i64, i64* %32, align 8
%34 = load i64, i64* %12, align 8
%35 = xor i64 %33, %34
%36 = load i64*, i64** %11, align 8
store i64 %35, i64* %36, align 8
store i64* %22, i64** %17, align 8
store i64 104, i64* %18, align 8
%37 = load i64*, i64** %17, align 8
%38 = load i64, i64* %37, align 8
%39 = load i64, i64* %18, align 8
%40 = add nsw i64 %38, %39
%41 = load i64*, i64** %17, align 8
store i64 %40, i64* %41, align 8
store i64* %22, i64** %9, align 8
store i64 0, i64* %10, align 8
%42 = load i64*, i64** %9, align 8
%43 = load i64, i64* %42, align 8
%44 = load i64, i64* %10, align 8
%45 = xor i64 %43, %44
%46 = load i64*, i64** %9, align 8
store i64 %45, i64* %46, align 8
%47 = bitcast [26 x i32]* %29 to i8*, !input_dep_instr !32, !data_dep_instr !33, !control_dep_instr !34
call void @llvm.memset.p0i8.i64(i8* align 16 %47, i8 0, i64 104, i1 false), !input_indep_instr !35, !data_indep_instr !36, !control_dep_instr !34
store i64* %22, i64** %7, align 8
store i64 0, i64* %8, align 8
%48 = load i64*, i64** %7, align 8
%49 = load i64, i64* %48, align 8
%50 = load i64, i64* %8, align 8
%51 = xor i64 %49, %50
%52 = load i64*, i64** %7, align 8
store i64 %51, i64* %52, align 8
store i64* %22, i64** %5, align 8
store i64 104, i64* %6, align 8
%53 = load i64*, i64** %5, align 8
%54 = load i64, i64* %53, align 8
%55 = load i64, i64* %6, align 8
%56 = xor i64 %54, %55
%57 = load i64*, i64** %5, align 8
store i64 %56, i64* %57, align 8
store i64* %22, i64** %15, align 8
store i64 0, i64* %16, align 8
%58 = load i64*, i64** %15, align 8
%59 = load i64, i64* %58, align 8
%60 = load i64, i64* %16, align 8
%61 = add nsw i64 %59, %60
%62 = load i64*, i64** %15, align 8
store i64 %61, i64* %62, align 8
store i32 0, i32* %30, align 4, !input_indep_instr !35, !data_indep_instr !36, !control_dep_instr !34
%63 = load i32, i32* %30
%64 = zext i32 %63 to i64
store i64* %22, i64** %13, align 8
store i64 %64, i64* %14, align 8
%65 = load i64*, i64** %13, align 8
%66 = load i64, i64* %65, align 8
%67 = load i64, i64* %14, align 8
%68 = add nsw i64 %66, %67
%69 = load i64*, i64** %13, align 8
store i64 %68, i64* %69, align 8
%70 = load i64, i64* %26
store i64 %70, i64* @1
br label %71
store i32 0, i32* %30, align 4, !input_indep_block !31, !input_indep_instr !35, !data_indep_instr !36, !control_dep_instr !34
%72 = load i32, i32* %30
%73 = zext i32 %72 to i64
store i64* %22, i64** %3, align 8
store i64 %73, i64* %4, align 8
%74 = load i64*, i64** %3, align 8
%75 = load i64, i64* %74, align 8
%76 = load i64, i64* %4, align 8
%77 = xor i64 %75, %76
%78 = load i64*, i64** %3, align 8
store i64 %77, i64* %78, align 8
%79 = load i64, i64* %25
store i64 %79, i64* @1
br label %80
store i32 0, i32* %30, align 4, !input_indep_block !31, !input_indep_instr !35, !data_indep_instr !36, !control_dep_instr !34
%81 = load i32, i32* %30
%82 = zext i32 %81 to i64
store i64* %22, i64** %1, align 8
store i64 %82, i64* %2, align 8
%83 = load i64*, i64** %1, align 8
%84 = load i64, i64* %83, align 8
%85 = load i64, i64* %2, align 8
%86 = xor i64 %84, %85
%87 = load i64*, i64** %1, align 8
store i64 %86, i64* %87, align 8
%88 = load i64, i64* %23
store i64 %88, i64* @1
br label %89
%90 = load i64, i64* %22
store i64 %90, i64* @1
store i64* @1, i64** %19, align 8
store i64 12000000000000, i64* %20, align 8
%91 = load i64*, i64** %19, align 8
%92 = load i64, i64* %91, align 8
%93 = load i64, i64* %20, align 8
%94 = icmp ne i64 %92, %93, !oh_verify !37
br i1 %94, label %95, label %assert.exit
call void @exit(i32 1) #5
unreachable
br label %exit
ret void
%1 = alloca i64*, align 8
%2 = alloca i64, align 8
%3 = alloca i64*, align 8
%4 = alloca i64, align 8
%5 = alloca i64*, align 8
%6 = alloca i64, align 8
%7 = alloca i64*, align 8
%8 = alloca i64, align 8
%9 = alloca i64*, align 8
%10 = alloca i64, align 8
%11 = alloca i64*, align 8
%12 = alloca i64, align 8
%13 = alloca i64*, align 8
%14 = alloca i64, align 8
%15 = alloca i64*, align 8
%16 = alloca i64, align 8
%17 = alloca i64*, align 8
%18 = alloca i64, align 8
%19 = alloca i64*, align 8
%20 = alloca i64, align 8
%21 = alloca i64*, align 8
%22 = alloca i64, align 8
%23 = alloca i64, align 8
store i64 0, i64* %23, align 8
%24 = alloca i64, align 8
store i64 0, i64* %24, align 8
%25 = alloca i64, align 8
store i64 0, i64* %25, align 8
%26 = alloca i64, align 8
store i64 0, i64* %26, align 8
%27 = alloca i64, align 8
store i64 0, i64* %27, align 8
%28 = alloca i64, align 8
store i64 0, i64* %28, align 8
%29 = alloca i32, align 4, !input_indep_block !31, !input_dep_instr !32, !data_dep_instr !33, !control_dep_instr !34
%30 = alloca [26 x i32], align 16, !input_dep_instr !32, !data_dep_instr !33, !control_dep_instr !34
%31 = alloca [26 x i32], align 16, !input_dep_instr !32, !data_dep_instr !33, !control_dep_instr !34
%32 = alloca i32, align 4, !input_dep_instr !32, !data_dep_instr !33, !control_dep_instr !34
%33 = bitcast [26 x i32]* %30 to i8*, !input_dep_instr !32, !data_dep_instr !33, !control_dep_instr !34
call void @llvm.memset.p0i8.i64(i8* align 16 %33, i8 0, i64 104, i1 false), !input_indep_instr !35, !data_indep_instr !36, !control_dep_instr !34
store i64* %23, i64** %19, align 8
store i64 0, i64* %20, align 8
%34 = load i64*, i64** %19, align 8
%35 = load i64, i64* %34, align 8
%36 = load i64, i64* %20, align 8
%37 = add nsw i64 %35, %36
%38 = load i64*, i64** %19, align 8
store i64 %37, i64* %38, align 8
store i64* %23, i64** %17, align 8
store i64 104, i64* %18, align 8
%39 = load i64*, i64** %17, align 8
%40 = load i64, i64* %39, align 8
%41 = load i64, i64* %18, align 8
%42 = add nsw i64 %40, %41
%43 = load i64*, i64** %17, align 8
store i64 %42, i64* %43, align 8
store i64* %23, i64** %7, align 8
store i64 0, i64* %8, align 8
%44 = load i64*, i64** %7, align 8
%45 = load i64, i64* %44, align 8
%46 = load i64, i64* %8, align 8
%47 = xor i64 %45, %46
%48 = load i64*, i64** %7, align 8
store i64 %47, i64* %48, align 8
%49 = bitcast [26 x i32]* %31 to i8*, !input_dep_instr !32, !data_dep_instr !33, !control_dep_instr !34
call void @llvm.memset.p0i8.i64(i8* align 16 %49, i8 0, i64 104, i1 false), !input_indep_instr !35, !data_indep_instr !36, !control_dep_instr !34
store i64* %23, i64** %15, align 8
store i64 0, i64* %16, align 8
%50 = load i64*, i64** %15, align 8
%51 = load i64, i64* %50, align 8
%52 = load i64, i64* %16, align 8
%53 = add nsw i64 %51, %52
%54 = load i64*, i64** %15, align 8
store i64 %53, i64* %54, align 8
store i64* %23, i64** %5, align 8
store i64 104, i64* %6, align 8
%55 = load i64*, i64** %5, align 8
%56 = load i64, i64* %55, align 8
%57 = load i64, i64* %6, align 8
%58 = xor i64 %56, %57
%59 = load i64*, i64** %5, align 8
store i64 %58, i64* %59, align 8
store i64* %23, i64** %13, align 8
store i64 0, i64* %14, align 8
%60 = load i64*, i64** %13, align 8
%61 = load i64, i64* %60, align 8
%62 = load i64, i64* %14, align 8
%63 = add nsw i64 %61, %62
%64 = load i64*, i64** %13, align 8
store i64 %63, i64* %64, align 8
store i32 0, i32* %32, align 4, !input_indep_instr !35, !data_indep_instr !36, !control_dep_instr !34
%65 = load i32, i32* %32
%66 = zext i32 %65 to i64
store i64* %23, i64** %3, align 8
store i64 %66, i64* %4, align 8
%67 = load i64*, i64** %3, align 8
%68 = load i64, i64* %67, align 8
%69 = load i64, i64* %4, align 8
%70 = xor i64 %68, %69
%71 = load i64*, i64** %3, align 8
store i64 %70, i64* %71, align 8
%72 = load i64, i64* %28
store i64 %72, i64* @1
br label %73
store i32 0, i32* %32, align 4, !input_indep_block !31, !input_indep_instr !35, !data_indep_instr !36, !control_dep_instr !34
%74 = load i32, i32* %32
%75 = zext i32 %74 to i64
store i64* %23, i64** %11, align 8
store i64 %75, i64* %12, align 8
%76 = load i64*, i64** %11, align 8
%77 = load i64, i64* %76, align 8
%78 = load i64, i64* %12, align 8
%79 = add nsw i64 %77, %78
%80 = load i64*, i64** %11, align 8
store i64 %79, i64* %80, align 8
%81 = load i64, i64* %27
store i64 %81, i64* @1
br label %82
store i32 0, i32* %32, align 4, !input_indep_block !31, !input_indep_instr !35, !data_indep_instr !36, !control_dep_instr !34
%83 = load i32, i32* %32
%84 = zext i32 %83 to i64
store i64* %23, i64** %1, align 8
store i64 %84, i64* %2, align 8
%85 = load i64*, i64** %1, align 8
%86 = load i64, i64* %85, align 8
%87 = load i64, i64* %2, align 8
%88 = xor i64 %86, %87
%89 = load i64*, i64** %1, align 8
store i64 %88, i64* %89, align 8
%90 = load i64, i64* %25
store i64 %90, i64* @1
br label %91
store i32 1, i32* %29, align 4, !data_indep_instr !36, !argument_dep_instr !37, !input_dep_block !38, !control_dep_instr !34
%92 = load i32, i32* %29
%93 = zext i32 %92 to i64
store i64* %23, i64** %9, align 8
store i64 %93, i64* %10, align 8
%94 = load i64*, i64** %9, align 8
%95 = load i64, i64* %94, align 8
%96 = load i64, i64* %10, align 8
%97 = add nsw i64 %95, %96
%98 = load i64*, i64** %9, align 8
store i64 %97, i64* %98, align 8
%99 = load i64, i64* %23
store i64 %99, i64* @1
store i64* @1, i64** %21, align 8
store i64 13000000000000, i64* %22, align 8
%100 = load i64*, i64** %21, align 8
%101 = load i64, i64* %100, align 8
%102 = load i64, i64* %22, align 8
%103 = icmp ne i64 %101, %102, !oh_verify !39
br i1 %103, label %104, label %assert.exit
call void @exit(i32 1) #5
unreachable
br label %exit
ret void
%3 = alloca i32, align 4, !input_indep_block !4, !input_dep_instr !5, !data_dep_instr !6
%4 = alloca i32, align 4, !input_dep_instr !5, !data_dep_instr !6
%5 = alloca i8**, align 8, !input_dep_instr !5, !data_dep_instr !6
%6 = alloca i8*, align 8, !input_dep_instr !5, !data_dep_instr !6
%7 = alloca i8*, align 8, !input_dep_instr !5, !data_dep_instr !6
%8 = alloca i32, align 4, !input_dep_instr !5, !data_dep_instr !6
%9 = alloca i64, align 8, !input_dep_instr !5, !data_dep_instr !6
store i32 0, i32* %3, align 4, !input_indep_instr !7, !data_indep_instr !8
store i32 %0, i32* %4, align 4, !input_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !9
store i8** %1, i8*** %5, align 8, !input_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !9
%10 = load i32, i32* %4, align 4, !input_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !9
%11 = icmp slt i32 %10, 3, !input_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !9
br i1 %11, label %12, label %13, !input_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !9
store i32 1, i32* %3, align 4, !data_indep_instr !8, !argument_dep_instr !9, !input_dep_block !10, !control_dep_instr !11
br label %28, !data_indep_instr !8, !argument_dep_instr !9, !control_dep_instr !11
%14 = load i8**, i8*** %5, align 8, !data_dep_instr !6, !argument_dep_instr !9, !input_dep_block !10, !control_dep_instr !11
%15 = getelementptr inbounds i8*, i8** %14, i64 1, !data_dep_instr !6, !argument_dep_instr !9, !control_dep_instr !11
%16 = load i8*, i8** %15, align 8, !data_dep_instr !6, !argument_dep_instr !9, !control_dep_instr !11
store i8* %16, i8** %6, align 8, !data_dep_instr !6, !argument_dep_instr !9, !control_dep_instr !11
%17 = load i8**, i8*** %5, align 8, !data_dep_instr !6, !argument_dep_instr !9, !control_dep_instr !11
%18 = getelementptr inbounds i8*, i8** %17, i64 2, !data_dep_instr !6, !argument_dep_instr !9, !control_dep_instr !11
%19 = load i8*, i8** %18, align 8, !data_dep_instr !6, !argument_dep_instr !9, !control_dep_instr !11
store i8* %19, i8** %7, align 8, !data_dep_instr !6, !argument_dep_instr !9, !control_dep_instr !11
%20 = load i8*, i8** %6, align 8, !data_dep_instr !6, !argument_dep_instr !9, !control_dep_instr !11
%21 = load i8*, i8** %7, align 8, !data_dep_instr !6, !argument_dep_instr !9, !control_dep_instr !11
%22 = call i32 @check_anagram(i8* %20, i8* %21), !data_indep_instr !8, !argument_dep_instr !9, !control_dep_instr !11
store i32 %22, i32* %8, align 4, !data_indep_instr !8, !argument_dep_instr !9, !control_dep_instr !11
%23 = load i32, i32* %8, align 4, !data_indep_instr !8, !argument_dep_instr !9, !control_dep_instr !11
%24 = icmp eq i32 %23, 1, !data_indep_instr !8, !argument_dep_instr !9, !control_dep_instr !11
br i1 %24, label %25, label %26, !data_indep_instr !8, !argument_dep_instr !9, !control_dep_instr !11
call void @main0(i8** %7, i8** %6), !data_indep_instr !8, !argument_dep_instr !9, !input_dep_block !10, !control_dep_instr !11
br label %27, !data_indep_instr !8, !argument_dep_instr !9, !control_dep_instr !11
call void @main1(i8** %7, i8** %6), !data_indep_instr !8, !argument_dep_instr !9, !input_dep_block !10, !control_dep_instr !11
br label %27, !data_indep_instr !8, !argument_dep_instr !9, !control_dep_instr !11
store i32 0, i32* %3, align 4, !data_indep_instr !8, !argument_dep_instr !9, !input_dep_block !10, !control_dep_instr !11
br label %28, !data_indep_instr !8, !argument_dep_instr !9, !control_dep_instr !11
%29 = load i32, i32* %3, align 4, !input_indep_block !4, !input_indep_instr !7, !data_indep_instr !8
ret i32 %29, !input_indep_instr !7, !data_indep_instr !8
%3 = alloca i32, align 4, !input_indep_block !4, !input_dep_instr !5, !data_dep_instr !6, !control_dep_instr !7
%4 = alloca i8*, align 8, !input_dep_instr !5, !data_dep_instr !6, !control_dep_instr !7
%5 = alloca i8*, align 8, !input_dep_instr !5, !data_dep_instr !6, !control_dep_instr !7
%6 = alloca [26 x i32], align 16, !input_dep_instr !5, !data_dep_instr !6, !control_dep_instr !7
%7 = alloca [26 x i32], align 16, !input_dep_instr !5, !data_dep_instr !6, !control_dep_instr !7
%8 = alloca i32, align 4, !input_dep_instr !5, !data_dep_instr !6, !control_dep_instr !7
store i8* %0, i8** %4, align 8, !input_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
store i8* %1, i8** %5, align 8, !input_dep_instr !5, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%9 = bitcast [26 x i32]* %6 to i8*, !input_dep_instr !5, !data_dep_instr !6, !control_dep_instr !7
call void @llvm.memset.p0i8.i64(i8* align 16 %9, i8 0, i64 104, i1 false), !input_indep_instr !9, !data_indep_instr !10, !control_dep_instr !7
%10 = bitcast [26 x i32]* %7 to i8*, !input_dep_instr !5, !data_dep_instr !6, !control_dep_instr !7
call void @llvm.memset.p0i8.i64(i8* align 16 %10, i8 0, i64 104, i1 false), !input_indep_instr !9, !data_indep_instr !10, !control_dep_instr !7
store i32 0, i32* %8, align 4, !input_indep_instr !9, !data_indep_instr !10, !control_dep_instr !7
br label %11, !input_indep_instr !9, !data_indep_instr !10, !control_dep_instr !7
%12 = load i8*, i8** %4, align 8, !data_dep_instr !6, !argument_dep_instr !8, !input_dep_block !11, !control_dep_instr !7
%13 = load i32, i32* %8, align 4, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%14 = sext i32 %13 to i64, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%15 = getelementptr inbounds i8, i8* %12, i64 %14, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%16 = load i8, i8* %15, align 1, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%17 = sext i8 %16 to i32, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%18 = icmp ne i32 %17, 0, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
br i1 %18, label %19, label %33, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%20 = load i8*, i8** %4, align 8, !data_dep_instr !6, !argument_dep_instr !8, !input_dep_block !11, !control_dep_instr !7
%21 = load i32, i32* %8, align 4, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%22 = sext i32 %21 to i64, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%23 = getelementptr inbounds i8, i8* %20, i64 %22, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%24 = load i8, i8* %23, align 1, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%25 = sext i8 %24 to i32, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%26 = sub nsw i32 %25, 97, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%27 = sext i32 %26 to i64, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%28 = getelementptr inbounds [26 x i32], [26 x i32]* %6, i64 0, i64 %27, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%29 = load i32, i32* %28, align 4, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%30 = add nsw i32 %29, 1, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
store i32 %30, i32* %28, align 4, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%31 = load i32, i32* %8, align 4, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%32 = add nsw i32 %31, 1, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
store i32 %32, i32* %8, align 4, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
br label %11, !data_indep_instr !10, !argument_dep_instr !8, !control_dep_instr !7
store i32 0, i32* %8, align 4, !input_indep_block !4, !input_indep_instr !9, !data_indep_instr !10, !control_dep_instr !7
br label %34, !input_indep_instr !9, !data_indep_instr !10, !control_dep_instr !7
%35 = load i8*, i8** %5, align 8, !data_dep_instr !6, !argument_dep_instr !8, !input_dep_block !11, !control_dep_instr !7
%36 = load i32, i32* %8, align 4, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%37 = sext i32 %36 to i64, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%38 = getelementptr inbounds i8, i8* %35, i64 %37, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%39 = load i8, i8* %38, align 1, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%40 = sext i8 %39 to i32, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%41 = icmp ne i32 %40, 0, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
br i1 %41, label %42, label %56, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%43 = load i8*, i8** %5, align 8, !data_dep_instr !6, !argument_dep_instr !8, !input_dep_block !11, !control_dep_instr !7
%44 = load i32, i32* %8, align 4, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%45 = sext i32 %44 to i64, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%46 = getelementptr inbounds i8, i8* %43, i64 %45, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%47 = load i8, i8* %46, align 1, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%48 = sext i8 %47 to i32, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%49 = sub nsw i32 %48, 97, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%50 = sext i32 %49 to i64, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%51 = getelementptr inbounds [26 x i32], [26 x i32]* %7, i64 0, i64 %50, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%52 = load i32, i32* %51, align 4, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%53 = add nsw i32 %52, 1, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
store i32 %53, i32* %51, align 4, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%54 = load i32, i32* %8, align 4, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%55 = add nsw i32 %54, 1, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
store i32 %55, i32* %8, align 4, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
br label %34, !data_indep_instr !10, !argument_dep_instr !8, !control_dep_instr !7
store i32 0, i32* %8, align 4, !input_indep_block !4, !input_indep_instr !9, !data_indep_instr !10, !control_dep_instr !7
br label %57, !input_indep_instr !9, !data_indep_instr !10, !control_dep_instr !7
%58 = load i32, i32* %8, align 4, !data_dep_instr !6, !argument_dep_instr !8, !input_dep_block !11, !control_dep_instr !7
%59 = icmp slt i32 %58, 26, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
br i1 %59, label %60, label %73, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%61 = load i32, i32* %8, align 4, !data_dep_instr !6, !argument_dep_instr !8, !input_dep_block !11, !control_dep_instr !7
%62 = sext i32 %61 to i64, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%63 = getelementptr inbounds [26 x i32], [26 x i32]* %6, i64 0, i64 %62, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%64 = load i32, i32* %63, align 4, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%65 = load i32, i32* %8, align 4, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%66 = sext i32 %65 to i64, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%67 = getelementptr inbounds [26 x i32], [26 x i32]* %7, i64 0, i64 %66, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%68 = load i32, i32* %67, align 4, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
%69 = icmp ne i32 %64, %68, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
br i1 %69, label %70, label %71, !data_dep_instr !6, !argument_dep_instr !8, !control_dep_instr !7
store i32 0, i32* %3, align 4, !data_indep_instr !10, !argument_dep_instr !8, !input_dep_block !11, !control_dep_instr !7
br label %74, !data_indep_instr !10, !argument_dep_instr !8, !control_dep_instr !7
br label %72, !data_indep_instr !10, !argument_dep_instr !8, !input_dep_block !11, !control_dep_instr !7
call void @check_anagram0(i32* %8), !data_indep_instr !10, !argument_dep_instr !8, !input_dep_block !11, !control_dep_instr !7
br label %57, !data_indep_instr !10, !argument_dep_instr !8, !control_dep_instr !7
store i32 1, i32* %3, align 4, !data_indep_instr !10, !argument_dep_instr !8, !input_dep_block !11, !control_dep_instr !7
br label %74, !data_indep_instr !10, !argument_dep_instr !8, !control_dep_instr !7
%75 = load i32, i32* %3, align 4, !input_indep_block !4, !input_indep_instr !9, !data_indep_instr !10, !control_dep_instr !7
ret i32 %75, !input_indep_instr !9, !data_indep_instr !10, !control_dep_instr !7
